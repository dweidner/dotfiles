# shell/helpers

# ----------------------------------------------------
# Table of Contents
# ----------------------------------------------------
# 1. Custom Environment Variables
# 2. System Utilities
# 3. OSX Utilities
# 4. Git Utilities
# ----------------------------------------------------


# 1. Custom Environment Variables -------------------- {{{1

COLOR_SUCCESS=${COLOR_SUCCESS:-"\e[1;32m"}
COLOR_WARN=${COLOR_WARN:-"\e[1;33m"}
COLOR_ERROR=${COLOR_ERROR:-"\e[1;31m"}
COLOR_RESET="\e[0m"


# 2. System Utilities -------------------------------- {{{1

#
# Test whether the given command can be executed.
#
# Usage: is_executable command
#
# $1 = Name of the command to execute
#
is_executable() {
  test -x "$(command -v "$1")"
}

#
# Print a status information.
#
# Usage: print_status message
#
# $1 = Message to print.
#
print_status() {
  printf "\n● %s\n" "$1"
}

#
# Print a success message.
#
# Usage: print_success message
#
# $1 = Message to print.
#
print_success() {
  printf "%b✓ %s%b\n" "$COLOR_SUCCESS" "$1" "$COLOR_RESET"
}

#
# Print a warning message.
#
# Usage: print_warning message
#
# $1 = Message to print.
#
print_warning() {
  printf "%b▴ WARNING: %b%s\n" "$COLOR_WARN" "$COLOR_RESET" "$1"
}

#
# Print a error message.
#
# Usage: print_error message
#
# $1 = Message to print.
#
print_error() {
  printf "%b⨯ ERROR: %b%s\n" "$COLOR_ERROR" "$COLOR_RESET" "$1"
}

#
# Ask for user input.
#
# Usage: seek_confirmation question
#
# $1 = Question to ask.
#
seek_confirmation() {
  read -r -n 1 -p "● $* (y/n) "
  printf "\n"
}

#
# Test whether the user confirmed a question asked via readline.
#
# Usage: is_confirmed
#
is_confirmed() {
  [[ "$REPLY" =~ ^[YyJj]$ ]]
}


# 3. OSX Utilities ----------------------------------- {{{1

#
# Test whether the current operating system is a version of Mac OSX.
#
# Usage: is_mac
#
is_mac() {
  [[ "$OSTYPE" == darwin* ]]
}


# 4. Git Utilities ----------------------------------- {{{1

#
# Test if the current working directory is a git repository.
#
# Usage: is_git_repository && git status --short
#
is_git_repository() {
  git rev-parse --is-inside-work-tree >/dev/null 2>&1
}


# vim:syntax=sh:foldmethod=marker:foldlevel=2
