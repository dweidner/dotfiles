#!/usr/bin/env bash
#
# @file Proxy command executions to running docker containers.


# (1) Global variables -------------------------------------------------- {{{1

declare -Ag PROJECT_TEMPLATES=(
  ["node"]="4dc038da8ba946a534ae2ee813a3df5e"
  ["ruby"]="872f426e784a08e5e591096d5e9e6df4"
)



# (2) Utility functions ------------------------------------------------- {{{1

#
# Determine whether docker is running
#
# usage: is_docker_running
#
is_docker_running() {
  docker info >/dev/null 2>&1
}

#
# Determine whether a service container is running.
#
# usage: is_service_running <name>
#
is_service_running() {
  compose ps --status running --services 2>/dev/null | grep -q -E "\b${1}\b"
}

#
# Determine whether a service container exists in the current project.
#
# usage: service_exists <name>
#
service_exists() {
  compose config --services 2>/dev/null | grep -q -E "\b${1}\b"
}

#
# Determine whether a command with the given name exists in the current
# environment.
#
# usage: command_exists <name>
#
command_exists() {
  command -v "${1}" >/dev/null 2>&1
}

#
# Determine whether the output device supports colors.
#
# usage: supports_colors
#
supports_colors() {
  local colors

  if [[ ! -t 1 ]]; then
    return 1
  fi

  colors="$(tput colors)"

  if [[ -z "${colors}" ]]; then
    return 1
  fi

  (( colors >= 8))
}

#
# Print an error message.
#
# usage: error <message>
#
error() {
  echo "${COLORS[red]}==> ${*}${COLORS[normal]}" >&2
}

#
# Search for a file in the parent directories.
#
# usage: find_up <file> [<directory>]
#
find_up() {
  local file="${1}"
  local current_directory="${2:-$PWD}"

  while [[ "${current_directory}" != "/" ]]; do
    if [[ -r "${current_directory}/${file}" ]]; then
      echo "${current_directory}/${file}"
      return 0
    fi
    current_directory="$(dirname "${current_directory}")"
  done

  return 1
}

#
# Get the path to the root directory of the current project.
#
# usage: find_root [<directory>]
#
find_root() {
  local working_dir="${1:-$PWD}"

  local project_markers=(
    "composer.json"
    "package.json"
    ".git"
    ".ddev"
    ".vscode"
    ".editorconfig"
  )

  local marker_name
  local marker_file

  for marker_name in "${project_markers[@]}"; do
    marker_file="$(find_up "${marker_name}" "${working_dir}")"

    if [[ -r "${marker_file}" ]]; then
      dirname "${marker_file}"
      return 0
    fi
  done

  return 1
}

#
# Get the path to the docker compose configuration.
#
# usage: find_config [<directory>]
#
find_config() {
  local working_dir="${1-:$PWD}"

  local config_files=(
    "${working_dir}/.ddev/.ddev-docker-compose-full.yaml"
    "${working_dir}/compose.yml"
    "${working_dir}/compose.yaml"
    "${working_dir}/docker-compose.yml"
    "${working_dir}/docker-compose.yaml"
  )

  local config_file

  for config_file in "${config_files[@]}"; do
    if [[ -r "${config_file}" ]]; then
      echo "${config_file}"
      return 0
    fi
  done

  return 1
}

#
# Find the first service container that exists in the current project.
#
# usage: find_service <name> [<name>] [â€¦]
#
find_service() {
  local service_name

  for service_name in "${@}"; do
    if service_exists "${service_name}"; then
      echo "${service_name}"
      return 0
    fi
  done

  return 1
}

#
# Download a gist to target directory.
#
# usage: download_gist <user> <id> <file>
#
download_gist() {
  local user="${1}"
  local id="${2}"
  local file="${3}"

  wget -q -O "${file}" "https://gist.github.com/${user}/${id}/download"
}


# (3) Commands ---------------------------------------------------------- {{{1

#
# Initialize a project.
#
# usage: init <type>
#
init() {
  local type="${1}"

  if [[ -z "${type}" ]]; then
    error "Project type is missing"
    return 128
  fi

  local template_id="${PROJECT_TEMPLATES[$type]}"

  if [[ -z "${template_id}" ]]; then
    error "Unsupported project type [${type}]"
    return 128
  fi

  local project_directory
  project_directory="$(find_root "${PWD}")"

  if [[ ! -d "${project_directory}" ]]; then
    error "Could not determine project directory"
    return 1
  fi

  local tmp_file
  tmp_file="$(mktemp "${TMPDIR:-/tmp/}${type}.XXXXXXXXXXXX")"

  if ! download_gist "dweidner" "${template_id}" "${tmp_file}"; then
    error "Could not download project template"
    return 1
  fi

  if ! unzip -qnj -d "${project_directory}" "${tmp_file}"; then
    error "Could not extract project template"
    return 1
  fi

  if [[ -f "${tmp_file}" ]]; then
    rm "${tmp_file}"
  fi

  return 0
}

#
# Run docker compose in the current project.
#
# usage: compose <command>
#
compose() {
  if ! command_exists "docker"; then
    error "Command [docker] is not defined"
    return 127
  fi

  if ! is_docker_running; then
    error "Docker is not running"
    return 64
  fi

  local project_directory
  project_directory="$(find_root "${PWD}")"

  if [[ ! -d "${project_directory}" ]]; then
    error "Could not determine project directory"
    return 1
  fi

  local config_file
  config_file="$(find_config "${project_directory}")"

  if [[ ! -r "${config_file}" ]]; then
    error "Docker compose configuration not found"
    return 1
  fi

  local config_directory
  config_directory="$(dirname "${config_file}")"

  local env_files=()

  env_files+=("${config_directory}/.env.local")
  env_files+=("${project_directory}/.env.local")

  local options=()

  options+=(--project-directory "${project_directory}")
  options+=(--file "${config_file}")

  for env_file in "${env_files[@]}"; do
    if [[ -r "${env_file}" ]]; then
      options+=(--env-file "${env_file}")
      break
    fi
  done

  docker compose "${options[@]}" "${@}"
}

#
# Run a command in a given service container. Tries to use a list of fallback
# candidates if the given service does not exist in the current project.
#
# usage: run <service> <command> [<options>] [<arguments>]
#
run() {
  local service_name="${1}"

  local fallback_services=()
  local fallback_service=

  case "${service_name}" in
    app|node|php)
      fallback_services+=("laravel.test" "web" "app")
      ;;
    db)
      fallback_services+=("mysql" "mariadb")
      ;;
  esac

  if ! service_exists "${service_name}" ; then
    fallback_service="$(find_service "${fallback_services[@]}")"

    if [[ -z "${fallback_service}" ]]; then
      error "Service container does not exist [${service_name}]"
      return 1
    fi

    service_name="${fallback_service}"
  fi

  shift 1

  if is_service_running "${service_name}"; then
    compose exec "${service_name}" "${@}"
  else
    compose run --rm "${service_name}" "${@}"
  fi
}

#
# Help text for custom command
#
# usage: help
#
help() {
  cat <<- CommandUsage
		Docker Service Manager v1.0.0-beta

		Proxy the execution of frequently used commands to the corresponding
		Docker Compose services. Supports DDEV and Laravel Sail.

		${COLORS[green]}Command Usage:${COLORS[normal]}
		  dsm [command] [options] [arguments]

		${COLORS[green]}Compose Commands:${COLORS[normal]}
		  init      Create a docker compose configuration.
		  config    Retrieve the docker compose configuration.
		  up        Start all containers of the current project.
		  down      Stop all containers of the current project.
		  restart   Restart all containers of the current project.
		  ps        List all containers of the current project.
		  shell     Start a shell session.
		  stats     Display resource usage statistics.

		${COLORS[green]}Database Commands:${COLORS[normal]}
		  mysql     Run a MYSQL CLI terminal session.

		${COLORS[green]}Node Commands:${COLORS[normal]}
		  node      Run a Node snippet.
		  npm       Run a npm command.
		  npx       Run a npx command.

		${COLORS[green]}PHP Commands:${COLORS[normal]}
		  artisan   Run an Artisan command.
		  composer  Run a Composer command.
		  drupal    Run a Drupal Console command.
		  drush     Run a Drush command.
		  kirby     Run a Kirby CLI command.
		  php       Run a PHP snippet.
		  phpcs     Run PHP CodeSniffer.
		  phpstan   Run PHPStan.
		  phpunit   Run a PHPUnit test.
		  pint      Run Pint a code style fixer.
		  wp        Run WordPress CLI command.

		${COLORS[green]}Ruby Commands:${COLORS[normal]}
		  bundle    Run a Bundler command.
		  compass   Run a Compass command.
		  gem       Run a Ruby gem.
		  jekyll    Run a Jekyll command.
		  ruby      Run a Ruby snippet.
	CommandUsage
}

#
# Main entry point of the script.
#
# usage: main [command] [options] [arguments]
#
main() {
  if supports_colors; then
    declare -Ag COLORS=(
      ["red"]="$(tput setaf 1)"
      ["green"]="$(tput setaf 2)"
      ["normal"]="$(tput sgr0)"
    )
  fi

  local command="${1:-help}"
  shift 1

  case "${command}" in
    h|help)
      help
      ;;
    i|init)
      init "${@}"
      ;;
    c|config)
      compose config "${@}"
      ;;
    up)
      compose up "${@}"
      ;;
    down)
      compose down "${@}"
      ;;
    restart)
      compose restart "${@}"
      ;;
    ps)
      compose ps --format "table {{.ID}}\t{{.Name}}\t{{.Service}}\t{{.Status}}\t{{.Image}}" "${@}"
      ;;
    stats)
      compose stats "${@}"
      ;;
    sh|shell)
      run app sh "${@}"
      ;;
    artisan)
      run php php artisan "${@}"
      ;;
    bundle)
      run ruby bundle "${@}"
      ;;
    compass)
      run ruby bundle exec compass "${@}"
      ;;
    composer)
      run php composer "${@}"
      ;;
    drupal)
      run php php ./vendor/bin/drupal "${@}"
      ;;
    drush)
      run php php ./vendor/bin/drush "${@}"
      ;;
    gem)
      run ruby gem "${@}"
      ;;
    jekyll)
      run ruby bundle exec jekyll "${@}"
      ;;
    kirby)
      run php php ./vendor/bin/kirby "${@}"
      ;;
    mysql)
      run db mysql "${@}"
      ;;
    node)
      run node node "${@}"
      ;;
    npm)
      run node npm "${@}"
      ;;
    npx)
      run node npx "${@}"
      ;;
    php)
      run php php "${@}"
      ;;
    phpcs)
      run php php ./vendor/bin/phpcs "${@}"
      ;;
    phpstan)
      run php php ./vendor/bin/phpstan "${@}"
      ;;
    phpunit)
      run php php ./vendor/bin/phpunit "${@}"
      ;;
    pint)
      run php php ./vendor/bin/pint "${@}"
      ;;
    ruby)
      run ruby ruby "${@}"
      ;;
    wp|wordpress)
      run php php ./vendor/bin/wp "${@}"
      ;;
    *)
      error "Unknown command [${command}]"
      help
      ;;
  esac
}

main "${@}"


# vim:foldmethod=marker:foldlevel=2
