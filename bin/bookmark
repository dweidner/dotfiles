#!/usr/bin/env bash

readonly XDG_DATA_HOME="${XDG_DATA_HOME:-$HOME/.local/share}"

readonly BOOKMARK_FILE="${BOOKMARK_FILE:-$XDG_DATA_HOME/dotfiles/bookmarks}"
readonly BOOKMARK_DEFAULT_CMD="${BOOKMARK_DEFAULT_COMMAND:-list}"

#
# Display usage information.
#
usage() {
  cat <<- EndOfUsage
		Bookmarks v1.0.0

		Usage:
		  bookmark <command> [options] [arguments]

		Commands:
		  add 		Add the given directory to the list of bookmarks.
		  list		List all available bookmarks.
		  remove	Delete a given bookmark from the list.
		  find		Find all bookmarks matching a given keyword.
		  edit		Open a given bookmark in the default editor.
	EndOfUsage
}

#
# Print an error message.
#
# usage: warn <message>
#
warn() {
  echo -e "\\033[0;31m$*\\033[0;m" >&2
}

#
# Confirm a question with the user.
#
# usage: confirm <question>
#
confirm() {
  read -r -p $'\e[0;32m'"$* (y/n [n]) "$'\e[0;m' answer

  case "$answer" in
    y|Y) return 0 ;;
    *) return 1 ;;
  esac
}

#
# Add a new bookmark to the list.
#
# usage: add_bookmark [<path>]
#
add_bookmark() {
  realpath "${1:-$PWD}" >> "$BOOKMARK_FILE"
}

#
# List all available bookmarks.
#
# usage: list_bookmarks [-type]
#
list_bookmarks() {
  local type

  while (( $# > 0 )); do
    case "$1" in
      -type) type="$2"; shift; shift ;;
      *) shift ;;
    esac
  done

  local -a files=()

  while IFS=$'\n' read -r file; do
    if [[ -z "$type" ]] \
      || [[ "$type" == "f" && -f "$file" ]] \
      || [[ "$type" == "d" && -d "$file" ]]; then
      files+=("$file")
    fi
  done < <(grep -vE "(^\\s*#|^\\s*$)" "$BOOKMARK_FILE")

  printf "%s\\n" "${files[@]}"
}

#
# Remove a bookmark from the list.
#
# usage: remove_bookmark <name>
#
remove_bookmark() {
  local name="$1"

  local tmp_file
  tmp_file="$(mktemp "${TMPDIR:-/tmp/}bookmarks.XXXXXXXXXXXX")"

  while IFS=$'\n' read -r -u 3 file; do
    if confirm "Do you want to delete ${file/$HOME/\~} from you list?"; then
      grep -v "$file" "$BOOKMARK_FILE" > "$tmp_file"
    fi
  done 3< <(find_bookmark "$name")

  if [[ -s "$tmp_file" ]]; then
    mv "$tmp_file" "$BOOKMARK_FILE"
  fi
}

#
# Find all bookmarks matching the given keyword.
#
# usage: find_bookmark [-type] [<name>]
#
find_bookmark() {
  local -a options=()
  local -a needle=()

  while (( $# > 0 )); do
    case "$1" in
      -*) options+=( "$1" "$2" ); shift; shift ;;
      *)  needle+=( "$1" ); shift ;;
    esac
  done

  list_bookmarks "${options[@]}" | \
    grep --ignore-case --color=auto "${needle[*]}"
}

#
# Open the given bookmark in the default editor. If no argument is given, the
# bookmark file is opened instead.
#
# usage: edit_bookmark <name>
#
edit_bookmark() {
  local name="$1"

  if [[ -z "$name" ]]; then
    ${EDITOR:-vim} -- "$BOOKMARK_FILE" && return 0 || return 1
  fi

  local file
  file="$(find_bookmark -type f "$name" | head -n1)"

  if [[ -z "$file" ]]; then
    warn "==> Bookmark [$name] not found"
    return 1
  fi

  ${EDITOR:-vim} -- "$file"
}

#
# Maintain bookmarks for frequently used files/directories.
#
# usage: bookmark [<cmd>] [options] [arguments]
#
main() {
  local command="${1:-$BOOKMARK_DEFAULT_CMD}"

  case "$command" in
    a |add)    shift; add_bookmark "$@" ;;
    rm|remove) shift; remove_bookmark "$@" ;;
    f |find)   shift; find_bookmark "$@" ;;
    e |edit)   shift; edit_bookmark "$@" ;;
    ls|list)   shift; list_bookmarks "$@" ;;
    *)         usage ;;
  esac
}

main "$@"
