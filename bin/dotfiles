#!/usr/bin/env bash

#
# Constants
#
# $COLOR_SUCCESS = Color used for success messages
# $COLOR_WARN    = Color used for warning messages
# $COLOR_ERROR   = Color used for error messages
# $COLOR_RESET   = Reset color information
#

COLOR_SUCCESS=${COLOR_SUCCESS:-"\e[1;32m"}
COLOR_WARN=${COLOR_WARN:-"\e[1;33m"}
COLOR_ERROR=${COLOR_ERROR:-"\e[1;31m"}
COLOR_RESET="\e[0m"

#
# Options
#
# $DOTFILES         = Path of the local working copy.
# $DOTFILES_REMOTE  = Name of the remote git repository.
#

DOTFILES="${DOTFILES:-$HOME/.dotfiles}"
DOTFILES_REMOTE="${DOTFILES_REMOTE:-dweidner/dotfiles}"

#
# Flags
#
# $INSTALL_NODE_MODULES = Install list of node modules
# $INSTALL_FORMULAE     = Install list of hombrew formulae
# $INSTALL_APPS         = Install macOS applications
# $CREATE_SYMLINKS      = Create symbolic links to dotfiles
# $UPDATE_SUBMODULES    = Whether to update submodules or not
#

INSTALL_NODE_MODULES=0
INSTALL_FORMULAE=0
INSTALL_APPS=0
CREATE_SYMLINKS=0
UPDATE_OSX_SETTINGS=0

#
# Command aliases
#

_brew() {
  "${BREW:-/usr/local/bin/brew}" "$@"
}
_rbenv() {
  "${RBENV:-/usr/local/bin/rbenv}" "$@"
}
_nodenv() {
  "${NODENV:-/usr/local/bin/nodenv}" "$@"
}

#
# Tells users how to use the script.
#
dotfiles::usage() {
  cat <<EOT

Usage: dotfiles [-h] [-u] [-s] [-b] [-n] [-x] [-a]

Options:
   -h  Print usage information.
   -s  Create symbolic links (may overwrite existing).
   -b  Install homebrew formulae.
   -n  Install npm packages.
   -x  Run script to customize OSX default settings.
   -a  Combine options [-u], [-s], [-b] and [-n]

Copyright (c) Daniel Weidner
Licensed under the MIT license.

EOT
}

#
# Check for the existiance of flags and update corresponding
# script variables.
#
parse_options() {
  set -- "$@"

  local ARGN=$#
  while [ "$ARGN" -ne 0 ]; do
    case $1 in
      -h) dotfiles::usage
          exit 0
          ;;
      -s) CREATE_SYMLINKS=1
          ;;
      -b) INSTALL_FORMULAE=1
          ;;
      -n) INSTALL_NODE_MODULES=1
          ;;
      -x) UPDATE_OSX_SETTINGS=1
          ;;
      -a) UPDATE_OSX_SETTINGS=1
          CREATE_SYMLINKS=1
          INSTALL_FORMULAE=1
          INSTALL_NODE_MODULES=1
          INSTALL_APPS=1
          ;;
      ?*) print_error "Unknown option."
          usage
          exit 0
          ;;
    esac
    shift
    ARGN=$((ARGN-1))
  done
}

#
# Test whether the current operating system is a version of Mac OSX.
#
is_mac() {
  [[ "$OSTYPE" == darwin* ]]
}

#
# Test whether the given command can be executed.
#
# $1 = Name of the command to execute.
#
is_executable() {
  test -x "$(command -v "$1")"
}

#
# Print a status information.
#
# $1 = Message to print.
#
print_status() {
  printf "\n● %s\n" "$1"
}

#
# Print a success message.
#
# $1 = Message to print.
#
print_success() {
  printf "%b✓ %s%b\n" "$COLOR_SUCCESS" "$1" "$COLOR_RESET"
}

#
# Print a warning message.
#
# $1 = Message to print.
#
print_warning() {
  printf "%b▴ WARNING: %b%s\n" "$COLOR_WARN" "$COLOR_RESET" "$1"
}

#
# Print a error message.
#
# $1 = Message to print.
#
print_error() {
  printf "%b⨯ ERROR: %b%s\n" "$COLOR_ERROR" "$COLOR_RESET" "$1" >&2
}

#
# Ask for user input.
#
# $1 = Question to ask.
#
seek_confirmation() {
  read -r -n 1 -p "● $* (y/n) "
  printf "\n"
}

#
# Test whether the user confirmed a question asked via readline.
#
is_confirmed() {
  [[ "$REPLY" =~ ^[YyJj]$ ]]
}

#
# Test if a given folder is a git repository.
#
# $1 = Path of the directory.
#
is_git_repository() {
  local dir="$1"

  # Ensure the specified directory exists
  if [[ ! -d "$dir" ]]; then
    return 1
  fi

  # Switch to the directory before running the git command
  pushd "$dir" >/dev/null

  # Test whether the current working directory is a git repository
  if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
    popd >/dev/null
    return 0
  fi

  popd >/dev/null
  return 1
}

#
# Download a compressed archive and extract it to a target
# directory.
#
# $1 = Name of the repository to download.
# $2 = Target directory to copy the repository to.
#
download_repository() {
  local repository="$1"
  local target="$2"

  # Notify users about started process
  print_status "Downloading remote repository ..."

  # Generate a unique name for the temporary archive
  local prefix
  prefix="$(basename "$0")"
  local tmpfile
  tmpfile="$(mktemp "/tmp/$prefix.tar.gz")"

  # Load and extract the repository
  curl -fsSLo "$tmpfile" "https://github.com/$repository/tarball/master"
  tar -zxf "$tmpfile" --strip-components 1 -C "$target"

  # Remove the archive
  rm -rf "$tmpfile"

  # Notify user about finished process
  print_success "Done."
}

#
# Install the dotfiles repository to the target directory.
#
# $1 = Name of the repository to load.
# $2 = Path to install the repository to.
#
install_dotfiles() {
  local repository="${1:-$DOTFILES_REMOTE}"
  local dir="${2:-$DOTFILES}"

  if [[ -z "$repository" || -z "$dir" ]]; then
    print_error "Invalid arguments given."
    return 1
  fi

  # Download and extract remote repository
  if [[ ! -d "$dir" ]]; then
    download_repository "$repository" "$dir"
  fi

  # Setup archive as git repository...
  if ! is_git_repository "$dir"; then
    pushd "$dir" >/dev/null
    git init
    git remote add origin "git@github.com:$repository.git"
    git fetch origin master
    git reset --hard FETCH_HEAD
    git clean -fd
    popd >/dev/null
  fi

  # Test if installation was successfull
  [[ -d "$dir" && -z $(is_git_repository "$dir") ]]
}

#
# Test if xcode command line tools are installed. Note: Only works for OSX 10.9+.
#
is_xcode_installed() {
  [ "$(xcode-select -p >/dev/null; printf "%s" "$?")" -eq 0 ]
}

#
# Install the xcode command line tools.
#
install_xcode() {
  local darwin_version
  darwin_version="$(uname -r)"

  # Older versions of macOS require a manual installation
  if (( ${darwin_version%%.*} > 12 )); then
    return 1
  fi

  # Install the Xcode command line tools
  print_status "Installing XCode Command Line Tools ..."
  if xcode-select --install; then
    print_success "Done."
    return 0
  fi

  return 1
}

#
# Insall homebrew the missing package manager for macOS.
#
install_homebrew() {
  print_status "Installing homebrew ..."

  if ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"; then
    print_success "Done."
    return 0
  fi

  return 1
}

#
# Install command line utilities via Homebrew the missing package manager
# for macOS.
#
install_formulae() {
  typeset -a taps
  taps=(
    "homebrew/dupes"
    "homebrew/versions"
    "homebrew/apache"
    "homebrew/php"
    "homebrew/fuse"
    "universal-ctags/universal-ctags"
  )

  typeset -a formulae
  formulae=(
    "bash"
    "bash-completion"
    "zsh"
    "zplug"
    "coreutils"
    "tmux"
    "git"
    "git-flow"
    "rsync"
    "grep"
    "curl"
    "wget"
    "openssh"
    "encfs"
    "todo-txt"
    "adminer"
    "composer"
    "drush"
    "drupalconsole"
    "wp-cli"
    "the_silver_searcher"
    "imagemagick"
  )

  # Install homebrew if not available
  if ! is_executable "brew"; then
    if ! install_homebrew; then
      print_error "Could not install homebrew."
      return 1
    fi
  fi

  # Update homebrew formulae
  _brew update
  _brew doctor

  # Start installation process
  print_status "Installing homebrew formulae ..."

  # Add additional repositories
  for tap in "${taps[@]}"; do
    _brew tap "$tap"
  done

  # Install additional formulae
  for formula in "${formulae[@]}"; do
    _brew install "$formula"
  done

  # Install version manager for node and ruby
  _brew install rbenv
  _rbenv install 2.4.0
  _rbenv global 2.4.0
  _brew install nodenv
  _nodenv install 7.5.0
  _nodenv global 7.5.0

  # Install, setup and run DNSmasq
  _brew install dnsmasq
  _brew service start dnsmasq

  if [ ! -f "/etc/resolver/dev" ]; then
    sudo mkdir -p /etc/resolver
    echo "nameserver 127.0.0.1" > /etc/resolver/dev
  fi

  # Install latest version of apache
  _brew install httpd24 --with-privileged-ports --with-http2
  sudo /usr/local/bin/brew services start homebrew/apache/httpd24

  # Install PHP in version 5.6 with additional modules
  _brew install php56 --with-httpd24 --with-homebrew-curl
  _brew install php56-mcrypt
  _brew install php56-xdebug
  _brew unlink php56

  # Install PHP in version 7.1
  _brew install php71 --with-httpd24 --with-homebrew-curl
  _brew install php71-xdebug

  # Install the latest version of mysql
  _brew install mysql
  /usr/local/bin/mysql_secure_installation
  _brew service restart mysql

  # Install preferred editor
  _brew install macvim --with-override-system-vim
  _brew install --HEAD universal-ctags

  # Install php code sniffer and additional coding standards
  if _brew install php-code-sniffer; then
    install_coding_standards
  fi

  # Remove old downloads and finish process
  _brew cleanup
  print_success "Done."
}

#
# Install frequently used node modules using the node package manager.
#
install_node_modules() {
  typeset -a packages
  packages=(
    "yo"
    "jshint"
    "eslint"
    "grunt-cli"
    "gulp-cli"
    "autoprefixer"
    "node-sass"
  )

  print_status "Installing node modules ..."

  for package in "${packages[@]}"; do
    npm install -g "$package"
  done

  print_success "Done."
}

#
# Install macOS applications via the terminal.
#
install_apps() {
  typeset -a taps
  taps=(
    "caskroom/cask"
    "caskroom/versions"
    "caskroom/fonts"
  )

  typeset -a apps
  apps=(
    "1password"
    "alfred"
    "bartender"
    "dropbox"
    "fluid"
    "google-chrome"
    "hazel"
    "imagealpha"
    "imageoptim"
    "jadengeller-helium"
    "mountain"
    "slack"
    "spotify"
    "skyfonts"
    "the-unarchiver"
    "transmission"
    "viscosity"
    "visual-studio-code"
    "virtualbox"
    "adobe-photoshop-lightroom441"
  )

  typeset -a appstore
  appstore=(
    "Affinity Designer"
    "Pixelmatator"
    "iA Writer"
    "Marked 2"
    "Readkit"
    "Dash 3"
    "Yummy FTP Pro"
    "Meta"
    "Daisy Disk"
    "ColorSnapper 2"
    "Magnet"
  )

  typeset -a quicklook
  quicklook=(
    "qlcolorcode"
    "qlmarkdown"
    "qlstepen"
  )

  typeset -a fonts
  fonts=(
    "open-sans"
    "fira-code"
    "source-code-pro"
  )

  print_status "Installing macOS applications..."

  # Ensure cask is available
  for tap in "${taps[@]}"; do
    _brew tap "$tap"
  done

  # Install macOS applications via CASK
  for app in "${apps[@]}"; do
    _brew cask install --appdir="~/Applications" "$app"
  done

  # Improve quicklook
  for ql in "${quicklook[@]}"; do
    _brew cask install "$ql"
  done

  # Install some additional system fonts
  for font in "${fonts[@]}"; do
    _brew cask install "font-$font"
  done

  # Launch Skyfonts to sync fonts via the service
  find /usr/local/Caskroom/skyfonts -type d -name SkyFonts.app -exec open {} \;

  # Cleanup downloaded packages
  _brew cask cleanup
  print_success "Done."

  # Reminder about applications that are licensed via the AppStore
  print_status "You have licensed some of your applications via the AppStore:"
  for app in "${appstore[@]}"; do
    printf "\t-%s" "$app"
  done

  seek_confirmation "Do you want to launch the AppStore now?"
  if is_confirmed; then
    open -a "App Store"
  fi
}

#
# Install additional php coding standards for PHP CodeSniffer.
#
install_coding_standards() {
  local prefix
  local path

  prefix="/usr/local/share/php-code-sniffer/Standards"
  path="$(/usr/local/bin/phpcs --config-show installed_paths | tr -d '\n')"
  path="$path,$prefix/PHPCompatibility"
  path="$path,$prefix/Drupal-Coder/coder_sniffer"
  path="$path,$prefix/WordPress-Coding-Standards"
  path="${path#,}"

  if mkdir -p "$prefix"; then
    print_status "Installing PHP coding standards ..."
    git clone https://github.com/wimg/PHPCompatibility.git "$prefix/PHPCompatibility"
    git clone --branch 7.x-2.x https://git.drupal.org/project/coder.git "$prefix/Drupal-Coder"
    git clone --branch master https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards.git "$prefix/WordPress-Coding-Standards"

    /usr/local/bin/phpcs --config-set installed_paths "$path"
    print_success "Done."
  fi
}

#
# Create a symbolic link to a file in the dotfiles repository.
#
# $1 = Relative path to the file in the dotfiles repository.
# $2 = Relative path from the home directory.
#
symlink() {
  if [ -r "$DOTFILES/$1" ]; then
    ln -fs "$DOTFILES/$1" "$HOME/$2"
    return $?
  else
    print_error "Can not create a symbolic link to $1"
    return 1
  fi
}

#
# Create symbolic links between configuration files of the dotfiles repository
# and files in the home directory.
#
create_symlinks() {
  # Copy `.gitconfig` if it does not exist
  [[ ! -f "$HOME/.gitconfig" ]] && cp "$DOTFILES/git/gitconfig" "$HOME/.gitconfig"

  # Create the necessary symbolic links between the `dotfiles` and `HOME`
  print_status "Creating symbolic links ...."
  symlink "vim"                 ".vim"
  symlink "shell/profile"       ".profile"
  symlink "shell/inputrc"       ".inputrc"
  symlink "shell/dircolors"     ".dircolors"
  symlink "shell/bashrc"        ".bashrc"
  symlink "shell/bash_profile"  ".bash_profile"
  symlink "shell/bash_prompt"   ".bash_prompt"
  symlink "zsh"                 ".zsh"
  symlink "zsh/zshrc"           ".zshrc"
  symlink "zsh/zprofile"        ".zprofile"
  symlink "tmux"                ".tmux"
  symlink "tmux/tmux.conf"      ".tmux.conf"
  symlink "git/gitattributes"   ".gitattributes"
  symlink "git/gitignore"       ".gitignore"
  symlink "todo"                ".todo"
  symlink "misc/ackrc"          ".ackrc"
  symlink "misc/gemrc"          ".gemrc"
  symlink "misc/ctags"          ".ctags"
  symlink "misc/agignore"       ".agignore"
  symlink "misc/backup_ignore"  ".backup_ignore"
  symlink "misc/tern-project"   ".tern-project"
  print_success "Done."
}

#
# Install commands and applications for macOS.
#
setup_mac() {
  if ! is_executable "npm"; then
    INSTALL_NODE_MODULES=0
  fi

  if ! is_xcode_installed; then
    if ! install_xcode; then
      print_error "Could not install XCode Command Line Tools. Please install the Command Line Tools manually: https://developer.apple.com/downloads"
      return 1
    fi
  fi

  if [ "$INSTALL_FORMULAE" -eq 1 ]; then
    install_formulae
  fi

  if [ "$INSTALL_NODE_MODULES" -eq 1 ]; then
    install_node_modules
  fi

  if [ "$INSTALL_APPS" -eq 1 ]; then
    install_apps
  fi

  if [ "$UPDATE_OSX_SETTINGS" -eq 1 ]; then
    seek_confirmation "Do you want to customize the OSX settings?"

    if is_confirmed; then
      process_started "Setting OSX defaults ..."
      sh "$DOTFILES/bin/osxdefaults"
      print_sucess "Done."
    else
      print_warning "Aborted."
    fi
  fi
}

#
# Script entry point
#
main() {
  parse_options "$@"

  if ! install_dotfiles "${DOTFILES_REMOTE}" "${DOTFILES}"; then
    print_error "Could not install dotfiles."
  fi

  if [ "$CREATE_SYMLINKS" -eq 1 ]; then
    create_symlinks
  fi

  if is_mac; then
    setup_mac
  fi
}

main "$@"
