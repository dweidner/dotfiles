#!/usr/bin/env bash

DOTFILES="${DOTFILES:-$HOME/.dotfiles}"
DOTFILES_REMOTE="${DOTFILES_REMOTE:-dweidner/dotfiles}"

source "$DOTFILES/shell/helpers"

#
# Options/Flags
#
# $DOTFILES             = Path of the local working copy.
# $DOTFILES_REMOTE      = Name of the remote git repository.
# $INSTALL_NPM_PACKAGES = Install list of npm packages
# $INSTALL_FORMULAE     = Install list of hombrew formulae
# $INSTALL_APPS         = Install macOS applications
# $CREATE_SYMLINKS      = Create symbolic links to dotfiles
# $UPDATE_SUBMODULES    = Whether to update submodules or not
#

INSTALL_NPM_PACKAGES=0
INSTALL_FORMULAE=0
INSTALL_APPS=0
CREATE_SYMLINKS=0
UPDATE_OSX_SETTINGS=0

#
# Tells users how to use the script.
#
# Usage: usage
#
usage() {
  cat <<EOT

Usage: dotfiles [-h] [-u] [-s] [-b] [-n] [-x] [-a]

Options:
   -h  Print usage information.
   -s  Create symbolic links (may overwrite existing).
   -b  Install homebrew formulae.
   -n  Install npm packages.
   -x  Run script to customize OSX default settings.
   -a  Combine options [-u], [-s], [-b] and [-n]

Copyright (c) Daniel Weidner
Licensed under the MIT license.

EOT
}

#
# Check for the existiance of flags and update corresponding
# script variables.
#
# Usage: parse_options args
#
parse_options() {
  set -- "$@"

  local ARGN=$#
  while [ "$ARGN" -ne 0 ]; do
    case $1 in
      -h) usage
          exit 0
          ;;
      -s) CREATE_SYMLINKS=1
          ;;
      -b) INSTALL_FORMULAE=1
          ;;
      -n) INSTALL_NPM_PACKAGES=1
          ;;
      -x) UPDATE_OSX_SETTINGS=1
          ;;
      -a) UPDATE_OSX_SETTINGS=1
          CREATE_SYMLINKS=1
          INSTALL_FORMULAE=1
          INSTALL_NPM_PACKAGES=1
          INSTALL_APPS=1
          ;;
      ?*) print_error "Unknown option."
          usage
          exit 0
          ;;
    esac
    shift
    ARGN=$((ARGN-1))
  done
}

#
# Test whether the given command can be executed.
#
# Usage: is_executable command
#
# $1 = Name of the command to execute.
#
is_executable() {
  test -x "$(command -v "$1")"
}

#
# Test whether the current operating system is a version of Mac OSX.
#
# Usage: is_mac
#
is_mac() {
  [[ "$OSTYPE" == darwin* ]]
}

#
# Test if xcode command line tools are installed. Note: Only works for OSX 10.9+.
#
# Usage: is_xcode_installed
#
is_xcode_installed() {
  [ "$(xcode-select -p >/dev/null; printf "%s" "$?")" -eq 0 ]
}

#
# Test if a given folder is a git repository.
#
# Usage: is_git_repository directory
#
# $1 = Path of the directory.
#
is_git_repository() {
  local dir="$1"

  # Ensure the specified directory exists
  if [[ ! -d "$dir" ]]; then
    return 1
  fi

  # Switch to the directory before running the git command
  pushd "$dir" >/dev/null

  # Test whether the current working directory is a git repository
  if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
    popd >/dev/null
    return 0
  fi

  popd >/dev/null
  return 1
}

#
# Test whether the user confirmed a question asked via readline.
#
# Usage: is_confirmed
#
is_confirmed() {
  [[ "$REPLY" =~ ^[YyJj]$ ]]
}

#
# Create a symbolic link to a file in the dotfiles repository.
#
# Usage: link dotfile symlink
#
# $1 = Relative path to the file in the dotfiles repository.
# $2 = Relative path from the home directory.
#
link() {
  if [ -r "$DOTFILES/$1" ]; then
    ln -fs "$DOTFILES/$1" "$HOME/$2"
    return $?
  else
    print_error "Can not create a symbolic link to $1"
    return 1
  fi
}

#
# Notify user about a started process.
#
# Usage: process_started name [message]
#
#  $1  = Name of the process.
# [$2] = Optional debug message.
#
process_started() {
  local process="$1"
  local message="${2:-Processing...}"
  print_status "$message"
}

#
# Notify user about a finished process.
#
# Usage: process_done name [message]
#
#  $1  = Name of the process.
# [$2] = Optional debug message.
#
process_done() {
  # shellcheck disable=SC2034
  local process="$1"
  local message="${2:-Done.}"
  print_success "$message"
}

#
# Notify user about an aborted process.
#
# Usage: process_aborted name [message]
#
#  $1  = Name of the process.
# [$2] = Optional debug message.
#
process_aborted() {
  # shellcheck disable=SC2034
  local process="$1"
  local message="${2:-Failed.}"
  print_error "$message"
}

#
# Download a compressed archive and extract it to a target
# directory.
#
# Usage: download_github_archive repository target
#
# $1 = Name of the repository to download.
# $2 = Target directory to copy the repository to.
#
download_github_archive() {
  local repository="$1"
  local target="$2"

  # Generate a unique name for the temporary archive
  local prefix
  prefix="$(basename "$0")"
  local tmpfile
  tmpfile="$(mktemp "/tmp/$prefix.tar.gz")"

  # Load and extract the repository
  curl -fsSLo "$tmpfile" "https://github.com/$repository/tarball/master"
  tar -zxf "$tmpfile" --strip-components 1 -C "$target"

  # Remove the archive
  rm -rf "$tmpfile"
}

#
# Initialize a given directory as git repository.
#
# Usage: initialize_git_repository dir [remote]
#
#  $1 = Directory to initialize as git repository.
# [$2] = Name of the remote repository.
#
initialize_git_repository() {
  local dir="$1"
  local remote_repository="$2"

  # Switch to the given directory
  pushd "$dir" >/dev/null

  # Initialize the current directory as git repository
  git init

  # Fetch the remote repository and cleanup local working tree
  if [ -n "$remote_repository" ]; then
    git remote add origin "git@github.com:$repository.git"
    git fetch origin master
    git reset --hard FETCH_HEAD
    git clean -fd
  fi

  # Switch back to the previous directory
  popd >/dev/null
}

#
# Install the xcode command line tools.
#
# Usage: isntall_xcode
#
install_xcode() {
  # Determine version of Mac OSX
  local darwin_version=
  darwin_version="$(uname -r)"

  # Install the command line tools for OSX 10.9+.
  if (( ${darwin_version%%.*} > 12 )); then
    xcode-select --install
    return $?
  fi

  # Not so easy to install the command line tools automatically
  # for older versions of OSX
  return 1
}

#
# Insall homebrew the missing package manager for macOS.
#
# Usage: install_homebrew()
#
install_homebrew() {
  ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
}

#
# Install the dotfiles repository to the target directory.
#
# Usage: install_dotfiles path
#
# $1 = Name of the repository to load.
# $2 = Path to install the repository to.
#
install_dotfiles() {
  local repository="$1"
  local dir="$2"

  if [[ -z "$repository" || -z "$dir" ]]; then
    print_error "Invalid arguments given."
    return 1
  fi

  # Download and extract remote repository
  if [[ ! -d "$dir" ]]; then
    process_started "download_github_archive" "Downloading remote repository..."
    download_github_archive "$repository" "$dir"
    process_done "download_github_archive"
  fi

  # Setup archive as git repository...
  if ! is_git_repository "$dir"; then

    # Initialize repository and submodules
    process_started "initialize_git_repository" "Initializing git repository..."
    initialize_git_repository "$dir"
    process_done "initialize_git_repository"

  fi

  # Test if installation was successfull
  [[ -d "$dir" && -z $(is_git_repository "$dir") ]]
}

#
# Install command line utilities via Homebrew the missing package manager
# for macOS.
#
# Usage: install_homebrew
#
install_homebrew_formulae() {
  # Install homebrew if not available
  if ! is_executable "brew"; then
    process_started "install_homebrew" "Installing hombrew..."
    if ! install_homebrew; then
      print_error "Could not install homebrew"
      return 1
    fi
    process_done "install_homebrew"
  fi

  brew doctor
  brew tap homebrew/php
  brew tap homebrew/dupes
  brew tap homebrew/fuse
  brew update

  # Install, setup and run DNSmasq
  brew install dnsmasq
  sudo brew services start dnsmasq
  sudo mkdir -p /etc/resolver
  echo "nameserver 127.0.0.1" > /etc/resolver/dev

  # Update shell
  brew install bash
  brew install bash-completion
  brew install zsh
  brew install zplug

  # Update system utilities
  brew install git
  brew install git-flow
  brew install coreutils
  brew install tmux
  brew install wget
  brew install tree
  brew install rsync
  brew install grep
  brew install openssh
  brew install encfs

  # Install PHP in version 5.6
  brew install php56 --with-homebrew-curl --without-apache
  brew install php56-xdebug
  brew install php56-mcrypt
  brew install composer
  brew install adminer
  brew install drush
  brew install drupalconsole
  brew install wp-cli
  brew install phpmd
  brew install php-code-sniffer

  # Install the latest version of mysql
  brew install mysql
  eysql_secure_installation
  brew services restart mysql

  # Install prefered editor
  brew install macvim --override-system-vim

  # Install version manager for node and ruby
  brew install rbenv
  rbenv install 2.3.1
  rbenv global 2.3.1
  brew install nodenv
  nodenv install 5.12.0
  nodenv global 5.12.0

  # Install utilities
  brew install the_silver_searcher
  brew install ctags
  brew install imagemagick

  brew cleanup
}

#
# Install frequently used node modules using the node package manager.
#
# Usage: install_npm_packages
#
install_npm_packages() {
  if ! is_executable "npm"; then
    return 1
  fi

  typeset -a packages
  packages=(
    "npm-check-updates"
    "yo"
    "jshint"
    "eslint"
    "grunt-cli"
    "gulpt-cli"
    "autoprefixer"
    "node-sass"
  )

  for name in "${packages[@]}"; do
    npm install -g "$name"
  done
}

#
# Install macOS applications via the terminal.
#
# Usage: install_apps
#
install_apps() {
  # Ensure cask is available
  brew tap caskroom/cask
  brew tap caskroom/versions
  brew tap caskroom/fonts

  # Install macOS applications via CASK
  typeset -a casks
  casks=(
    "1password"
    "alfred"
    "bartender"
    "dropbox"
    "fluid"
    "google-chrome"
    "hazel"
    "imagealpha"
    "imageoptim"
    "jadengeller-helium"
    "mountain"
    "slack"
    "spotify"
    "skyfonts"
    "the-unarchiver"
    "transmission"
    "viscosity"
    "visual-studio-code"
    "virtualbox"
    "adobe-photoshop-lightroom571"
  )

  for name in "${casks[@]}"; do
    brew cask install --appdir="~/Applications" "$name"
  done

  # Improve quicklook
  typeset -a extensions
  extensions=(
    "qlcolorcode"
    "qlmarkdown"
    "qlstepen"
  )

  for name in "${extensions[@]}"; do
    brew cask install "$name"
  done

  # Install some additional system fonts
  typeset -a fonts
  fonts=(
    "open-sans"
    "camingocode"
    "source-code-pro"
  )

  for name in "${fonts[@]}"; do
    brew cask install "font-$name"
  done

  # Launch Skyfonts to sync fonts via the service
  find /usr/local/Caskroom/skyfonts -type d -name SkyFonts.app -exec open {} \;

  # Reminder about applications that are licensed via the AppStore
  typeset -a apps
  apps=(
    "Affinity Designer"
    "Pixelmatator"
    "iA Writer"
    "Marked 2"
    "Readkit"
    "Dash 3"
    "Yummy FTP Pro"
    "Meta"
    "Daisy Disk"
    "ColorSnapper 2"
    "Magnet"
  )

  print_status "You have licensed some of your applications via the AppStore:"
  for name in "${apps[@]}"; do
    printf "\t-%s" "$name"
  done

  seek_confirmation "Do you want to launch the AppStore now?"
  if is_confirmed; then
    open -a "App Store"
  fi

  # Cleanup downloaded packages
  brew cask cleanup

}

#
# Create symbolic links between configuration files of the dotfiles repository
# and files in the home directory.
#
# Usage: create_symlinks
#
create_symlinks() {
  # Copy `.gitconfig` if it does not exist
  [[ ! -f "$HOME/.gitconfig" ]] && cp "$DOTFILES/git/gitconfig" "$HOME/.gitconfig"

  # Create the necessary symbolic links between the `dotfiles` and `HOME`
  link "vim"                 ".vim"
  link "shell/profile"       ".profile"
  link "shell/inputrc"       ".inputrc"
  link "shell/dircolors"     ".dircolors"
  link "shell/bashrc"        ".bashrc"
  link "shell/bash_profile"  ".bash_profile"
  link "shell/bash_prompt"   ".bash_prompt"
  link "zsh"                 ".zsh"
  link "zsh/zshrc"           ".zshrc"
  link "zsh/zprofile"        ".zprofile"
  link "tmux"                ".tmux"
  link "tmux/tmux.conf"      ".tmux.conf"
  link "git/gitattributes"   ".gitattributes"
  link "git/gitignore"       ".gitignore"
  link "misc/gemrc"          ".gemrc"
  link "misc/ctags"          ".ctags"
  link "misc/agignore"       ".agignore"

  # Avoid creating symbolic links twice
  CREATE_SYMLINKS=0
}

#
# Script entry point
#
main() {
  # Handle script options
  parse_options "$@"

  # Download and install the repository if not already done
  if ! install_dotfiles "$DOTFILES_REMOTE" "$DOTFILES"; then
    print_error "Could not install dotfiles."
    return 1
  fi

  if is_mac; then
    # Install XCode on macOS
    if ! is_xcode_installed; then
      print_warning "The XCode Command Line Tools must be installed first."
      process_started "install_xcode" "Installing XCode Command Line Tools..."
      if ! install_xcode; then
        print_error "Could not install XCode Command Line Tools. Please install the Command Line Tools manually: https://developer.apple.com/downloads"
        exit 1
      fi
      process_done "insall_xcode"
    fi

    # Install frequently used homebrew formulae
    if [ "$INSTALL_FORMULAE" -eq 1 ]; then
      process_started "install_homebrew_formulae" "Installing hombrew formulae..."
      if ! install_homebrew_formulae; then
        print_error "Could not install homebrew formulae."
        return 1
      fi
      process_done "install_homebrew_formulae"
    fi

    # Install macOS applications
    if [ "$INSTALL_APPS" -eq 1 ]; then
      process_started "install_apps" "Installing macOS applications..."
      install_apps
      process_done "install_apps"
    fi

    # Run osxdefaults by Mathias Bynens
    if [ "$UPDATE_OSX_SETTINGS" -eq 1 ]; then
      seek_confirmation "Do you want to customize the OSX settings?"

      if is_confirmed; then
        process_started "osxdefaults" "Setting OSX defaults..."
        sh "$DOTFILES/bin/osxdefaults"
        process_done "osxdefaults"
      else
        process_aborted "osxdefaults"
      fi
    fi
  fi

  # Install frequently used npm packages
  if is_executable "npm" && [ "$INSTALL_NPM_PACKAGES" -eq 1 ]; then
    process_started "install_npm_packages" "Installing npm packages..."
    if ! install_npm_packages; then
      print_error "Could not install npm packages."
      return 1
    fi
    process_done "install_npm_packages"
  fi

  # Create symbolic links if desired
  if [ "$CREATE_SYMLINKS" -eq 1 ]; then
    process_started "create_symlinks" "Creating symbolic links..."
    create_symlinks
    process_done "create_symlinks"
  fi

  return 0
}

main "$@"
