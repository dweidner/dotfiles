#!/usr/bin/env bash

readonly BASEDIR="$(dirname "$0")"
readonly DOTFILES="${DOTFILES:-$(dirname "$BASEDIR")}"

readonly XDG_DATA_HOME="${XDG_DATA_HOME:-$HOME/.local/share}"

source "${DOTFILES}/shell/utilities.sh"


#
# Notify the user that a given command is not defined.
#
# usage: command_not_found <command>
#
command_not_found() {
  dot::error "Command [${1}] is not defined\\n"
  usage
}

#
# Notify the user about an invalid option.
#
# usage: unknown_option <name>
#
unknown_option() {
  dot::error "Unknown option given [${1}]"
}

#
# Notify the user about an unknown system component.
#
# usage: unknown_component <name>
#
unknown_component() {
  dot::error "Unknown system component [${1}]"
}

#
# Display usage information.
#
#
usage() {
  cat <<- EOF
		Dotfiles v2.1.0

		Usage:
		  dotfiles <command> [options] [arguments]

		Commands:
		  cleanup		Cleanup caches of various system components
		  help			Display help for a command
		  list			List available commands
		  update		Fetch the latest version of various system components
	EOF
}

#
# Display usage information for the cleanup command.
#
usage_cleanup_command() {
  cat <<-EOF
		Usage:
		  cleanup [<component>]
		
		Arguments:
		  component  	Name of the system component to cleanup
		
		Help:
		  The cleanup command purges various caches on the current system and removes
		  older versions of installed commands.
		
		    e.g. dotfiles cleanup homebrew
		
		  In order to cleanup all system components in one go leave out the component
		  name.
		
		    e.g. dotfiles cleanup
		
	EOF
}

#
# Display usage information for the help command.
#
usage_help_command() {
  cat <<-EOF
		Usage:
		  help [<command>]
		
		Arguments:
		  command  	Name of the command to display usage information for
		
		Help:
		  The help command displays help for a given command:
		
		    e.g dotfiles help update
		
		  To display a list of available commands, please use the list command.
		
	EOF
}

#
# Display usage information for the list command
#
usage_list_command() {
  cat <<-EOF
		Usage:
		  list [options]
		
		Options:
		  --raw  Display only the list of commands (no descriptions)
		
		Help:
		  The list command lists all available commands:
		
		    e.g. dotfiles list
		
		  It is possible to retrieve a raw list of commands using the --raw option.
		
		    e.g. dotfiles list --raw
		
	EOF
}

#
# Display usage information for the update command.
#
usage_update_command() {
  cat <<-EOF
		Usage:
			update <component>
		
		Arguments:
		  component  	Name of the system component to update
		
		Help:
		  The update command can be used to fetch the latest version of various
		  system components.
		
		    e.g. dotfiles update homebrew
		
	EOF
}

#
# Display help for a command.
#
# usage: help [<command>]
#
help() {
  local command="${1:-help}"

  case "$command" in
    cleanup) usage_cleanup_command ;;
    help)    usage_help_command ;;
    list)    usage_list_command ;;
    update)  usage_update_command ;;
    *)       command_not_found "$command" ;;
  esac
}

#
# Display a list of commands.
#
# usage: list [options]
#
list() {
  local raw=0

  while (( $# > 0 )); do
    case "$1" in
      --raw) raw=1 ;;
      --*)   unknown_option "$1" ;;
    esac
    shift
  done

  if (( raw == 0 )); then
    usage
    return
  fi

  cat <<-EOF
		cleanup
		help
		list
		update
	EOF
}

#
# Update system components.
#
# usage: update [<component>]
#
update() {
  # Udate all components if no argument is given
  if (( $# == 0)); then
    update_all
    return 0
  fi

  # Update only specific system components
  case "$1" in
    brew|homebrew) update_homebrew ;;
    node) update_node ;;
    nvm) update_nvm ;;
    rvm) update_rvm ;;
    system) update_system ;;
    tpm) update_tpm ;;
    *) unknown_component "$1" ;;
  esac
}

#
# Update all system components
#
# usage: update_all
#
update_all() {
  update_system
  update_homebrew
  update_nvm
  update_node
  update_rvm
  update_tpm
}

#
# Update the operating system
#
# usage: update_system
#
update_system() {
  case "$OSTYPE" in
    darwin*) update_macos ;;
  esac
}

#
# Update macOS from the command line
#
# usage: update_macos
#
update_macos() {
  dot::info "Updating macOS (requires root privileges) …"
  sudo softwareupdate --install --all \
    dot::ok "Updated macOS."
}

#
# Update homebrew the missing package manager for macOS
#
# usage: update_homebrew
#
update_homebrew() {
  dot::command_exists "brew" || return 1

  dot::info "Updating homebrew …"
  brew update --quiet & wait

  dot::info "Updating homebrew formulae …"
  local outdated_formulae
  outdated_formulae="$(brew outdated --quiet)"
  wait

  if [[ -z "$outdated_formulae" ]]; then
    dot::ok "Installed formulae are already up-to-date."
    return 0
  fi

  dot::info "Upgrading outdated formulae …"
  brew upgrade & wait
  dot::ok "Upgraded outdated formulae."
}

#
# Update the node version manager
#
# usage: update_nvm
#
update_nvm() {
  cd -- "$NVM_DIR" || return 1

  dot::function_exists "nvm" || source "$NVM_DIR/nvm.sh"
  dot::info "Updating nvm …"

  git checkout --quiet master
  git pull --quiet --progress --tags

  local version
  version="$(nvm --version)"

  local latest
  latest="$(git describe --abbrev=0 --match "v[0-9]*" origin --tags)"

  if [[ "$version" == "$latest" ]]; then
    git checkout --quiet "${version}"
    dot::ok "nvm is already up-to-date."
    return 0
  fi

  git checkout --quiet --progress "${latest}" \
    && dot::ok "Updated nvm to version ${latest}"

  source "$NVM_DIR/nvm.sh"
}

#
# Update the Node.js
#
# usage: update_node
#
update_node() {
  cd -- "$NVM_DIR" || return 1

  dot::function_exists "nvm" || source "$NVM_DIR/nvm.sh"
  dot::info "Updating Node.js …"

  local version
  version="$(nvm current)"
  local latest
  latest="$(nvm version-remote --lts)"

  wait

  if [[ "$version" == "$latest" ]]; then
    dot::ok "Node.js is already up-to-date."
    return 0
  fi

  dot::info "Upgrading Node.js from version ${version} to ${latest} …"
  nvm install "${latest}" & wait
  nvm install-latest-npm & wait
  dot::ok "Upgraded Node.js to version ${latest}."

  if dot::confirm "Do you want to use version ${latest} of Node.js as your system default?"; then
    nvm alias default "${latest}"
    nvm use "${latest}"
    dot::ok "Using version ${latest} of Node.js as your new system default."
  fi
}

#
# Update the ruby version manager
#
# usage: update_rvm
#
update_rvm() {
  dot::command_exists "rvm" || return 1

  dot::info "Updating ruby version manager to the latest version …"

  rvm get head
  rvm reload
  rvm get stable

  dot::ok "Updated ruby version manager to the latest version."
}

#
# Update tmux plugin manager and installed plugins
#
# usage: update_tpm
#
update_tpm() {
  local tpm_path="${TMUX_PLUGIN_MANAGER_PATH:-$XDG_DATA_HOME/tmux/plugins/tpm}"

  [[ -d "$tpm_path" ]] || return 1

  dot::info "Updating Tmux plugin manager …"
  cd "$tpm_path" || return 1
  git remote update >/dev/null

  local current
  current="$(git rev-parse "@")"

  local remote
  remote="$(git rev-parse "@{u}")"

  if [[ "$current" != "$remote" ]]; then
    git pull --quiet --progress && dot::ok "Updated Tmux plugin manager."
  else
    dot::ok "Tmux plugin manager is already up-to-date."
  fi

  dot::info "Updating tmux plugins …"

  TMUX_PLUGIN_MANAGER_PATH="$tpm_path" "$tpm_path/bin/update_plugins" all >/dev/null \
    && dot::ok "Updated tmux plugins."
}

#
# Cleanup the current system
#
# usage: cleanup [<component>]
#
cleanup() {
  # Cleanup all components if no argument is given
  if (( $# == 0)); then
    cleanup_all
    return 0
  fi

  # Cleanup a specific component only
  case "$1" in
    brew|homebrew) cleanup_homebrew ;;
    rvm) cleanup_rvm ;;
    *) unknown_component "$1" ;;
  esac
}

#
# Cleanup all system components
#
# usage: cleanup_all
#
cleanup_all() {
  if ! dot::confirm "Do you really want to clean up all system components?"; then
    return 1
  fi

  cleanup_homebrew
  cleanup_rvm
}

#
# Cleanup old versions of installed packages and prune dead symlinks.
#
# usage: cleanup_homebrew
#
cleanup_homebrew() {
  dot::command_exists "brew" || return 1

  dot::info "Removing old versions of installed formulae …"
  brew cleanup
  brew cask cleanup

  dot::info "Removing dead symlinks …"
  brew prune
}

#
# Reclaim all of the space used by rvm archives, repository clones, source
# files and logs
#
# usgage: cleanup_rvm
#
cleanup_rvm() {
  dot::command_exists "rvm" || return 1

  dot::info "Cleaning up rvm resources …"
  rvm cleanup all
}

#
# Main entry point of the script.
#
# usage: dotfiles <command>
#
main() {
  # Stop script execution, expect at least a command name
  if (( $# == 0)); then
    usage
    return 1
  fi

  local command="$1"
  shift

  # Run the given command
  case "$command" in
    cleanup) cleanup "$@" ;;
    help)    help "$@" ;;
    list)    list "$@" ;;
    update)  update "$@" ;;
    *)       command_not_found "$command" ;;
  esac
}

main "$@"
