#!/usr/bin/env bash

# -----------------------------------------------------------------------
# Table of Contents
# -----------------------------------------------------------------------
# 1. Global Variables
# 2. Utility Functions
# 3. Commands
# |- a) Usage Command
# |- b) Help Command
# |- c) Status Command
# |- d) Setup Command
# |- e) Update Command
# |- f) Cleanup Command
# 4. Entry Point
# -----------------------------------------------------------------------



# (1) Global Variables -------------------------------------------------- {{{1

readonly SCRIPT_DIR="$(dirname "$0")"

XDG_CACHE_HOME="${XDG_CACHE_HOME:-${HOME}/.cache}"
XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-${HOME}/.config}"
XDG_DATA_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}"

DOTFILES="${DOTFILES:-$(dirname "$SCRIPT_DIR")}"
NVM_DIR="${NVM_DIR:-${XDG_DATA_HOME}/nvm}"
RVM_PATH="${RVM_PATH:-${XDG_DATA_HOME}/rvm}"
TPM_PATH="${TPM_PATH:-${XDG_DATA_HOME}/tmux/plugins/tpm}"

QUIET=0
VERBOSE=0



# (2) Utility Functions ------------------------------------------------- {{{1

#
# Determine whether the current system is running macOS.
#
# usgage: is_mac
#
is_mac() {
  [[ "${OSTYPE}" =~ "darwin"* ]]
}

#
# Determine wheter a given value exists in an array
#
# usage: in_array <needle> <array>
#
in_array() {
  local needle="$1"
  local item

  shift

  for item; do
    if [[ "$needle" == "$item" ]]; then
      return 0
    fi
  done

  return 1
}

#
# Determine whether a command with the given name exists in the current
# environment.
#
# usage: command_exists <name>
#
command_exists() {
  command -v "$1" >/dev/null 2>&1
}

#
# Determine whether a function with the given name exists.
#
# Tries to declare the function which will return with an exit code > 0 if
# a function with the given name already exists (supposed to be faster than
# executing type -f).
#
# usage: function_exists <name>
#
function_exists() {
  declare -fF "$1" >/dev/null
  return $?
}

#
# Confirm a question with the user.
#
# usage: confirm <question>
#
confirm() {
  read -r -p $'\e[0;32m'"$* (y/n [n]) "$'\e[0;m' answer

  case "$answer" in
    y|Y) return 0 ;;
    *) return 1 ;;
  esac
}

#
# Print a status message.
#
# usage: print_message <message>
#
print_message() {
  (( ! QUIET )) \
    && echo -e "\\033[0;34m==> $*\\033[0;m"
}

#
# Print a message after a successfull operation.
#
# usage: print_success <message>
#
print_success() {
  (( ! QUIET )) \
    && echo -e "\\033[0;32m==> $*\\033[0;m"
}

#
# Print a warning message.
#
# usage: print_warning <message>
#
print_warning() {
  (( ! QUIET )) \
    && echo -e "\\033[0;33m==> $*\\033[0;m" >&2
}

#
# Print an error message.
#
# usage: print_error <message>
#
print_error() {
  (( ! QUIET )) \
    && echo -e "\\033[0;31m==> $*\\033[0;m" >&2
}

#
# Notify the user that a given command is not defined.
#
# usage: command_not_found <command>
#
command_not_found() {
  print_error "Command [${1}] is not defined\\n"
  usage
  exit 1
}

#
# Notify the user about an invalid option.
#
# usage: unknown_option <name>
#
unknown_option() {
  print_error "Unknown option given [${1}]"
}

#
# Load the node version manager into the current environment.
#
# usage: require_nvm
#
require_nvm() {
  if function_exists "nvm"; then
    return 0
  fi

  if [[ ! -r "${NVM_DIR}/nvm.sh" ]]; then
    return 1
  fi

  # shellcheck source=/dev/null
  source "${NVM_DIR}/nvm.sh"
}


#
# Load the ruby version manager into the current environment.
#
# usage: require_rvm
#
require_rvm() {
  if function_exists "rvm"; then
    return 0
  fi

  if [[ ! -r "${RVM_PATH}/scripts/rvm" ]]; then
    return 1
  fi

  # shellcheck source=/dev/null
  source "${RVM_PATH}/scripts/rvm"
}

#
# Create the directory structure for a given file path.
#
# usage: prepare_path <path>
#
prepare_path() {
  local path="${1}"
  local dir
  dir="$(dirname "$path")"

  if [[ -d "${dir}" ]]; then
    return 0
  fi

  mkdir -p "${dir}"
}

#
# Copy a file from the dotfiles repository to the home directory of the
# current user.
#
# usage: copy <source> <target>
#
copy() {
  local source="${DOTFILES}/$1"
  local target="$2"

  if [[ -e "${target}" ]]; then
    if ! confirm "overwrite ${target}?"; then
      print_warning "skipping ${target} …"
      return 1
    fi
  fi

  if ! prepare_path "${target}"; then
    print_error "could not create parent directory"
    return 1
  fi

  cp -f "${source}" "${target}" \
    && print_success "copied file to ${target}"
}

#
# Create a symlink from a file in the dotfiles repository to a file in the
# home directory.
#
# usage: symlink <source> <target>
#
symlink() {
  local source="${DOTFILES}/$1"
  local target="$2"

  if [[ -e "${target}" ]]; then
    if ! confirm "overwrite ${target}?"; then
      print_warning "skipping ${target} …"
      return 1
    fi
  fi

  if ! prepare_path "${target}"; then
    print_error "could not create parent directory"
    return 1
  fi

  ln -fns "${source}" "${target}" \
    && print_success "created symlink at ${target}"
}

#
# Run a given silently.
#
# usage: run <command>
#
silent() {
  # shellcheck disable=SC2048
  if (( ! VERBOSE )) || (( QUIET )); then
    $* >/dev/null
  else
    $*
  fi
}



# (3) Commands ---------------------------------------------------------- {{{1

# (a) Usage Command ----------------------------------------------------- {{{2

#
# Display a list of available commands.
#
# usage: usage
#
usage() {
  cat <<- EOF
		Dotfiles Utilities

		Usage:
		  dotfiles <command> [options] [arguments]

		Commands:
		  cleanup		Cleanup caches of various system components
		  help			Display help for a command
		  setup			Run the initial setup for various system components
		  status		Display status information for various system components
		  update		Fetch the latest version of various system components
	EOF
}

# (b) Help Command ------------------------------------------------------ {{{2

#
# Display help for a command.
#
# usage: help <command>
#
help() {
  local commands=("cleanup" "help" "setup" "status" "update")
  local command="${1:-help}"

  if ! in_array "${command}" "${commands[@]}"; then
    command_not_found "$command"
  fi

  "help_${command}_command"
}

#
# Display usage information for the cleanup command.
#
help_cleanup_command() {
  cat <<-EOF
		Usage:
		  cleanup [<component>]
		
		Arguments:
		  component  	Name of the system component to cleanup
		
		Help:
		  The cleanup command purges various caches on the current system and removes
		  older versions of installed commands.
		
		    e.g. dotfiles cleanup brew
		
		  In order to cleanup all system components in one go leave out the component
		  name.
		
		    e.g. dotfiles cleanup
		
	EOF
}

#
# Display usage information for the help command.
#
help_help_command() {
  cat <<-EOF
		Usage:
		  help [<command>]
		
		Arguments:
		  command  	Name of the command to display usage information for
		
		Help:
		  The help command displays help for a given command:
		
		    e.g dotfiles help update
		
		  To display a list of available commands, please use the list command.
		
	EOF
}

#
# Display usage information for the setup command.
#
help_setup_command() {
  cat <<-EOF
		Usage:
			setup [<component>]
		
		Arguments:
		  component  	Name of the system component to run the initial setup for.
		
		Help:
		  The setup command can be used to run the initial setup for a specific
		  system component.
		
		    e.g. dotfiles setup php
		
	EOF
}

#
# Display usage information for the status command.
#
help_status_command() {
  cat <<-EOF
		Usage:
			status [<component>]

		Arguments:
		  component  	Name of the system component to retrieve the status for.
		
		Help:
		  The status command can be used to display status information for various
		  system components.
		
		    e.g. dotfiles status
		
	EOF
}

#
# Display usage information for the update command.
#
help_update_command() {
  cat <<-EOF
		Usage:
			update [<component>]
		
		Arguments:
		  component  	Name of the system component to update
		
		Help:
		  The update command can be used to fetch the latest version of various
		  system components.
		
		    e.g. dotfiles update brew
		
	EOF
}

# (c) Status Command ---------------------------------------------------- {{{2

#
# Display status information about different system components.
#
# usage: status [<component>]
#
status() {
  local -a components=( "$@" )

  if (( $# == 0 )); then
    components=(
      "system"
      "formulae"
      "node_packages"
      "python_packages"
      "gems"
    )
  fi

  local bold="\\033[0;30m"
  local light="\\033[0;39m"
  local reset="\\033[0;m"
  local color="${light}"

  local updates=0
  local total=0

  for component in "${components[@]}"; do
    if function_exists "status_${component}"; then
      updates=$("status_${component}")
      total=$((total + updates))

      (( updates > 0 )) \
        && color="${bold}" \
        || color="${light}"

      printf '%b%-16s %2d%b\n' "${color}" "${component}" "${updates}" "${reset}"
    fi
  done

  (( total == 0 ))
}

#
# Determine the number of updates available for the current system.
#
status_system() {
  case "${OSTYPE}" in
    darwin*) status_macos ;;
  esac
}

#
# Determine the number of updates availabe for macOS.
#
status_macos() {
  command_exists "mas" || return 1

  mas outdated | wc -l | tr -d " "
}

#
# Determine the number of outdated homebrew formulae.
#
status_formulae() {
  command_exists "brew" || return 1

  brew outdated -q | wc -l | tr -d " "
}

#
# Determine the number of outdated node packages.
#
status_node_packages() {
  require_nvm || return 1
  command_exists "npm" || return 1

  npm outdated --global --parseable --depth=0 | wc -l | tr -d " "
}

#
# Determine the number of outdated python packages.
#
status_python_packages() {
  command_exists "pip3" || return 1

  pip3 list --outdated | tail -n +3 | wc -l | tr -d " "
}

#
# Determine the number of outdated gems.
#
status_gems() {
  require_rvm || return 1
  function_exists "rvm" || return 1

  rvm @global do gem outdated | wc -l | tr -d " "
}

# (d) Setup Command ----------------------------------------------------- {{{2

#
# Setup development dependencies.
#
# usage: setup [<component>]
#
setup() {
  local -a components=( "$@" )

  if (( $# == 0 )); then
    components=(
      "symlinks"
      "homebrew"
      "formulae"
      "shell"
      "nvm"
      "node"
      "node_packages"
      "php_packages"
      "python_packages"
      "rvm"
      "gems"
      "tpm"
      "tmux_plugins"
      "phpcs"
      "icloud"
    )
  fi

  for component in "${components[@]}"; do
    if function_exists "setup_${component}"; then
      "setup_${component}"
    fi
  done
}

#
# Create symlinks to included configuration files (uses XDG base
# directories if supported by the application).
#
# @link https://wiki.archlinux.org/index.php/XDG_Base_Directory_support|XDG Base Directory support
#
setup_symlinks() {
  local -a directories=(
    "${XDG_CONFIG_HOME}"
    "${XDG_CACHE_HOME}"
    "${XDG_CACHE_HOME}/bundle"
    "${XDG_CACHE_HOME}/composer"
    "${XDG_CACHE_HOME}/gem"
    "${XDG_CACHE_HOME}/npm"
    "${XDG_CACHE_HOME}/nvim"
    "${XDG_CACHE_HOME}/vim"
    "${XDG_DATA_HOME}"
    "${XDG_DATA_HOME}/bash"
    "${XDG_DATA_HOME}/bundle"
    "${XDG_DATA_HOME}/bundle/plugin"
    "${XDG_DATA_HOME}/dotfiles"
    "${XDG_DATA_HOME}/gem"
    "${XDG_DATA_HOME}/less"
    "${XDG_DATA_HOME}/nvim"
    "${XDG_DATA_HOME}/tmux"
    "${XDG_DATA_HOME}/vim"
    "${XDG_DATA_HOME}/vim/backup"
    "${XDG_DATA_HOME}/vim/swap"
    "${XDG_DATA_HOME}/vim/undo"
  )

  print_message "Creating directories …"

  for directory in "${directories[@]}"; do
    mkdir -p "${directory}" && print_success "created ${directory}"
  done

  print_message "Creating symlinks …"

  symlink "bash/bash_profile"            "${HOME}/.bash_profile"
  symlink "bash/bashrc"                  "${HOME}/.bashrc" 
  symlink "bash/completions"             "${XDG_DATA_HOME}/bash-completion/completions"
  symlink "readline/inputrc"             "${XDG_CONFIG_HOME}/readline/inputrc"
  symlink "git/ignore"                   "${XDG_CONFIG_HOME}/git/ignore"
  symlink "git/commitmsg"                "${XDG_CONFIG_HOME}/git/commitmsg"
  symlink "vim/"                         "${HOME}/.vim"
  symlink "vim/nvimrc"                   "${XDG_CONFIG_HOME}/nvim/init.vim"
  symlink "vim/after"                    "${XDG_CONFIG_HOME}/nvim/after"
  symlink "vim/plugin"                   "${XDG_CONFIG_HOME}/nvim/plugin"
  symlink "vim/autoload"                 "${XDG_CONFIG_HOME}/nvim/autoload"
  symlink "tmux/tmux.conf"               "${XDG_CONFIG_HOME}/tmux/tmux.conf"
  symlink "misc/default-node-packages"   "${XDG_CONFIG_HOME}/nvm/default-packages"
  symlink "misc/gemrc"                   "${XDG_CONFIG_HOME}/gem/gemrc"
  symlink "misc/ctags"                   "${HOME}/.ctags"
  symlink "misc/ignore"                  "${HOME}/.ignore"
  symlink "misc/editorconfig"            "${HOME}/.editorconfig"
  symlink "misc/tern-config"             "${HOME}/.tern-config"
  copy    "git/config"                   "${XDG_DATA_HOME}/git/config"

  if is_mac; then
    symlink "macos/Brewfile"             "${HOME}/.Brewfile"
    symlink "macos/hushlogin"            "${HOME}/.hushlogin"
    symlink "macos/launchd/status.plist" "${HOME}/Library/LaunchAgents/de.dweidner.dotfiles.status.plist"
  fi
}

#
# Install homebrew.
#
setup_homebrew() {
  is_mac || return 1

  local directory="${HOMEBREW_PREFIX:-/usr/local}"

  print_message "Preparing '${directory}' (might require root privileges) …"

  if [[ ! -d "${directory}" ]]; then
    sudo mkdir "${directory}"
    sudo chflags norestricted "${directory}"
    sudo chown -R "${LOGNAME}:admin" "${directory}"
  fi

  if [[ ! -r "${directory}" ]]; then
    sudo chown -R "${LOGNAME}:admin" "${directory}"
  fi

  print_message "Installing hombrew …"
  ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
  print_success "Installed homebrew."
}

#
# Install essential homebrew formulae.
#
setup_formulae() {
  command_exists "brew" || return 1

  print_message "Installing homebrew formulae …"
  brew bundle install --global --verbose
  print_success "Installed formulae listed in ~/.Brewfile"
}

#
# Change the user's shell.
#
setup_shell() {
  local path
  path="$(command -v bash)"

  if [[ ! -x "${path}" ]] || [[ "${SHELL}" == "${path}" ]]; then
    return 0
  fi

  grep "${path}" /etc/shells >/dev/null 2>&1 || {
    print_message "Adding '${path}' to /etc/shells"
    sudo sh -c "echo ${path} >> /etc/shells"
  }

  if confirm "Do you want to change the shell for the current user to '${path}'?"; then
    sudo chsh -s "${path}" "${USER}" \
      && print_success "Changed the user’s shell to '${path}'"
  fi
}

#
# Install node version manager.
#
setup_nvm() {
  print_message "Installing nvm …"

  git clone "https://github.com/creationix/nvm.git" "${NVM_DIR}" || {
    print_error "Cannot checkout nvm repository"
    return 1
  }

  local version
  version="$(git -C "${NVM_DIR}" describe --abbrev=0 --tags --match "v[0-9]*" origin)"

  git -C "${NVM_DIR}" checkout "${version}" || {
    print_error "Cannot switch to NVM version [${version}]"
    return 1
  }

  require_nvm || return 1
}

#
# Install the latest version of node.
#
setup_node() {
  function_exists "nvm" || return 1

  print_message "Installing latest node version …"
  nvm install --lts --latest-npm
}

#
# Install latest npm version and default packages.
#
setup_node_packages() {
  require_nvm || return 1
  command_exists "npm" || return 1

  print_message "Installing latest npm version …"
  npm install --global --production npm@latest

  print_message "Installing global node packages …"
  npm install --global --production yo
  npm install --global --production eslint

  while read -r package; do
    if [[ "${package}" != "yo" ]] && [[ "${package}" != "eslint" ]]; then
      npm install --global --production "${package}"
    fi
  done < "${DOTFILES}/misc/default-node-packages"
}

#
# Install cgr, a safer alternative to `composer global require`.
#
setup_cgr() {
  command_exists "composer" || return 1

  print_message "Installing cgr …"
  composer global require consolidation/cgr
}

#
# Install global php packages.
#
setup_php_packages() {
  command_exists "composer" || return 1
  command_exists "cgr" || setup_cgr

  print_message "Installing php packages …"

  local package
  local version

  while read -r package; do
    version="${package#*:}"
    name="${package%:*}"

    if [[ -n "${version}" ]]; then
      cgr --stability RC "${name}" "${version}"
    else
      cgr --stability RC "${name}"
    fi
  done < "${DOTFILES}/misc/default-php-packages"
}

#
# Install latest pip version and default packages.
#
setup_python_packages() {
  command_exists "pip3" || return 1

  print_message "Updating pip …"
  pip3 install --upgrade pip

  print_message "Installing python packages …"

  while read -r package; do
    pip3 install --upgrade "${package}"
  done < "${DOTFILES}/misc/default-python-packages"
}

#
# Install ruby version manager.
#
setup_rvm() {
  print_message "Installing rvm …"

  curl -sSL "https://get.rvm.io" \
    | bash -s -- --path "${RVM_PATH}" --ignore-dotfiles --ruby
}

#
# Install global gems.
#
setup_gems() {
  require_rvm || return 1
  function_exists "rvm" || return 1

  print_message "Installing global gems …"

  while read -r name; do
    rvm @global do gem install "${name}"
  done < "${DOTFILES}/misc/default-gems"
}

#
# Install tmux plugin manager.
#
setup_tpm() {
  print_message "Installing tmux plugin manager …"

  git clone "https://github.com/tmux-plugins/tpm" "${XDG_DATA_HOME}/tmux/plugins/tpm" || {
    print_error "Cannot checkout tpm repository"
    return 1
  }
}

#
# Install tmux plugins.
#
setup_tmux_plugins() {
  [[ -d "${XDG_DATA_HOME}/tmux/plugins/tpm" ]] || return 1

  print_message "Installing tmux plugins …"
  "${XDG_DATA_HOME}/tmux/plugins/tpm/bin/install_plugins"
}

#
# Setup php code sniffer.
#
setup_phpcs() {
  command_exists "phpcs" || return 1

  print_message "Setting default configuration for phpcs …"

  silent phpcs --config-set default_standard PSR2
  silent phpcs --config-set encoding utf-8
  silent phpcs --config-set show_progress 1
  silent phpcs --config-set colors 1
  silent phpcs --config-set report_width auto

  command_exists "cgr" || return 0

  print_message "Registering additional coding standards …"

  local cgr_path="${COMPOSER_HOME}/global"
  local wpcs_path="${cgr_path}/wp-coding-standards/wpcs/vendor/wp-coding-standards/wpcs"
  local coder_path="${cgr_path}/drupal/coder/vendor/drupal/coder/coder_sniffer"

  local path
  path="$(phpcs --config-show | grep installed_paths | cut -d: -f2 | sed -e 's/^[[:space:]]*//g')"

  [[ -d "${wpcs_path}" ]]  && [[ ",${path}," != *",${wpcs_path},"* ]]  && path="${wpcs_path},${path}"
  [[ -d "${coder_path}" ]] && [[ ",${path}," != *",${coder_path},"* ]] && path="${coder_path},${path}"

  path="$(sed -e 's/^,*//g' -e 's/,*$//g' <<< "${path}")"

  silent phpcs --config-set installed_paths "${path}"
}

#
# Setup a symlink for the iCloud Drive.
#
# On macOS the iCloud Drive is hidden in an obscure directory within a users
# Library. To make more accessible from the command line this will create a
# symlink that will be hidden from Finder by default.
#
setup_icloud() {
  is_mac || return

  print_message "Creating a hidden symlink to iCloud Drive…"

  # Create symlink if it does not already exist.
  if [[ ! -L "${HOME}/iCloud" ]];then
    ln -s \
      "${HOME}/Library/Mobile Documents/com~apple~CloudDocs" \
      "${HOME}/iCloud"
  fi

  # Hide the directory in Finder.app
  #
  # -P = Perform action on symlink instead of following it
  # -a = Change file attribute
  SetFile -P -a V "${HOME}/iCloud"
}

# (e) Update Command ---------------------------------------------------- {{{2

#
# Update system components.
#
# usage: update [<component>]
#
update() {
  local -a components=( "$@" )

  if (( $# == 0 )); then
    components=(
      "system"
      "homebrew"
      "formulae"
      "nvm"
      "node"
      "node_packages"
      "php_packages"
      "python_packages"
      "rvm"
      "gems"
      "tpm"
      "tmux_plugins"
    )
  fi

  for component in "${components[@]}"; do
    if function_exists "update_${component}"; then
      "update_${component}"
    fi
  done
}

#
# Update the operating system
#
update_system() {
  case "$OSTYPE" in
    darwin*) update_macos ;;
  esac
}

#
# Update macOS from the command line
#
update_macos() {
  print_message "Updating macOS (requires root privileges) …"

  sudo softwareupdate --install --all \
    && print_success "Updated macOS."
}

#
# Update homebrew the missing package manager for macOS
#
update_homebrew() {
  command_exists "brew" || return 1

  print_message "Updating homebrew …"
  brew update --quiet & wait
  print_success "Updated homebrew."
}

#
# Update homebrew formulae.
#
update_formulae() {
  command_exists "brew" || return 1

  print_message "Updating homebrew formulae …"

  local outdated_formulae
  outdated_formulae="$(brew outdated --quiet)"

  wait

  if [[ -z "$outdated_formulae" ]]; then
    print_success "Installed formulae are already up-to-date."
    return 0
  fi

  print_message "Upgrading outdated formulae …"
  brew upgrade & wait
  print_success "Upgraded outdated formulae."
}

#
# Update the node version manager
#
update_nvm() {
  require_nvm || return 1
  [[ -d "${NVM_DIR}/.git" ]] || return 1

  print_message "Updating nvm …"

  git -C "${NVM_DIR}" checkout --quiet master
  git -C "${NVM_DIR}" pull --quiet --progress --tags

  local version
  version="$(nvm --version)"

  local latest
  latest="$(git -C "${NVM_DIR}" describe --abbrev=0 --match "v[0-9]*" origin --tags)"

  if [[ "v${version}" == "${latest}" ]]; then
    print_success "nvm is already up-to-date."
    return 0
  fi

  git -C "${NVM_DIR}" checkout --quiet --progress "${latest}" \
    && print_success "Updated nvm to version ${latest}"

  # shellcheck source=/dev/null
  source "${NVM_DIR}/nvm.sh"
}

#
# Update the Node.js
#
update_node() {
  require_nvm || return 1
  function_exists "nvm" || return 1

  print_message "Updating Node.js …"

  local version
  version="$(nvm current)"

  local latest
  latest="$(nvm version-remote --lts)"

  wait

  if [[ "${version}" == "${latest}" ]]; then
    print_success "Node.js is already up-to-date."
    return 0
  fi

  print_message "Upgrading Node.js from version ${version} to ${latest} …"
  nvm install "${latest}" & wait
  nvm install-latest-npm & wait
  print_success "Upgraded Node.js to version ${latest}."

  if confirm "Do you want to use version ${latest} of Node.js as your system default?"; then
    nvm alias default "${latest}"
    nvm use "${latest}"
    print_success "Using version ${latest} of Node.js as your new system default."
  fi
}

#
# Update global node packages.
#
update_node_packages() {
  require_nvm || return 1
  command_exists "npm" || return 1

  print_message "Updating global node packages …"

  local outdated
  outdated="$(npm outdated --global --parseable --depth=0)"

  if [[ -z "${outdated}" ]]; then
    print_success "Global node packages are already up-to-date."
    return 0
  fi

  npm update --global \
    && print_success "Updated outdated node packages."
}

#
# Update global php packages.
#
update_php_packages() {
  command_exists "composer" || return 1
  command_exists "cgr" || return 1

  print_message "Updating cgr …"

  composer global update consolidation/cgr \
    && print_success "Updated cgr."

  print_message "Updating global php packages …"

  cgr update \
    && print_success "Update global php packages."
}

#
# Update outdated python packages.
#
update_python_packages() {
  command_exists "pip3" || return 1

  print_message "Updating python packages …"

  local outdated
  outdated="$(pip3 list --outdated | tail -n +3 | cut -d " " -f 1)"

  if [[ -z "${outdated}" ]]; then
    print_success "Python packages are already up-to-date."
    return 0
  fi

  while read -r package; do
    pip3 install --upgrade "${package}"
  done <<< "${outdated}"

  print_success "Upgraded outdated python packages."
}

#
# Update the ruby version manager
#
update_rvm() {
  require_rvm || return 1
  function_exists "rvm" || return 1

  print_message "Updating Ruby Version Manager …"

  local version
  version="$(rvm -v | cut -d ' ' -f 2)"

  local latest
  latest="$(curl -s --fail --location https://github.com/rvm/rvm/raw/master/VERSION)"

  wait

  if [[ "$version" == "$latest" ]]; then
    print_success "Ruby Version Manager is already up-to-date."
    return 0
  fi

  print_message "Upgrading Ruby Version Manager from version ${version} to ${latest} …"

  rvm get head
  rvm reload
  rvm get stable

  print_success "Upgraded Ruby Version Manager to version ${latest}."
}

#
# Update global gems.
#
update_gems() {
  require_rvm || return 1
  function_exists "rvm" || return 1

  print_message "Updating global ruby gems …"

  local outdated
  outdated="$(rvm @global do gem outdated)"

  if [[ -z "${outdated}" ]]; then
    print_success "Global ruby gems are already up-to-date"
    return 0
  fi

  rvm @global do gem update \
    && print_success "Updated global ruby gems."
}

#
# Update tmux plugin manager.
#
update_tpm() {
  [[ -d "${TPM_PATH}" ]] || return 1

  print_message "Updating Tmux plugin manager …"

  cd "${TPM_PATH}" || return 1
  git remote update >/dev/null

  local current
  current="$(git rev-parse "@")"

  local remote
  remote="$(git rev-parse "@{u}")"

  if [[ "$current" != "$remote" ]]; then
    git pull --quiet --progress && print_success "Updated Tmux plugin manager."
  else
    print_success "Tmux plugin manager is already up-to-date."
  fi
}

#
# Update tmux plugins.
#
update_tmux_plugins() {
  [[ -d "${TPM_PATH}" ]] || return 1

  print_message "Updating tmux plugins …"

  TMUX_PLUGIN_MANAGER_PATH="$(dirname "${TPM_PATH}")" "${TPM_PATH}/bin/update_plugins" all >/dev/null \
    && print_success "Updated tmux plugins."
}

# (f) Cleanup Command --------------------------------------------------- {{{2

#
# Cleanup the current system
#
# usage: cleanup [<component>]
#
cleanup() {
  local -a components=( "$@" )

  if (( $# == 0 )); then
    components=(
      "homebrew"
      "rvm"
      "gems"
    )
  fi

  for component in "${components[@]}"; do
    if function_exists "cleanup_${component}"; then
      "cleanup_${component}"
    fi
  done
}

#
# Cleanup old versions of installed packages and prune dead symlinks.
#
cleanup_homebrew() {
  command_exists "brew" || return 1

  print_message "Removing old versions of installed formulae …"
  brew cleanup
}

#
# Reclaim all of the space used by rvm archives, repository clones, source
# files and logs
#
cleanup_rvm() {
  require_rvm || return 1
  function_exists "rvm" || return 1

  print_message "Cleaning up rvm resources …"
  rvm cleanup all
}

#
# Clean up old versions of installed gems.
#
cleanup_gems() {
  require_rvm || return 1
  function_exists "rvm" || return 1

  print_message "Cleaning up old versions of installed gems …"
  rvm @global do gem cleanup
}



# (4) Entry Point ------------------------------------------------------- {{{1

#
# Main entry point of the script.
#
# usage: dotfiles <command> [<option>] [<argument>]
#
main() {
  # Stop script execution, expect at least a command name.
  if (( $# == 0 )); then
    usage
    return 1
  fi

  # Ensure that user binaries are included in the PATH variable.
  if [[ ":${PATH}:" != *":/usr/local/bin:"* ]]; then
    PATH="/usr/local/bin:${PATH}"
  fi

  # Extract the command and globally available options.
  local command="$1"
  shift

  while (( $# > 0 )); do
    case "$1" in
      -q|--quiet)   QUIET=1; VERBOSE=0; shift ;;
      -v|--verbose) QUIET=0; VERBOSE=1; shift ;;
      *)            break ;;
    esac
  done

  # Run the specified command.
  case "$command" in
    cleanup) cleanup "$@" ;;
    help)    help "$@" ;;
    setup)   setup "$@" ;;
    status)  status "$@" ;;
    update)  update "$@" ;;
    *)       command_not_found "$command" ;;
  esac
}

main "$@"



# vim:foldmethod=marker:foldlevel=2
