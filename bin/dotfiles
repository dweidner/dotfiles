#!/usr/bin/env bash

#
# Environment variables
#
# $DOTFILES_DIRECTORY         = Path of the local working copy.
# $DOTFILES_REMOTE_REPOSITORY = Name of the remote git repository.
#

if [ -z "$DOTFILES_DIRECTORY" ]; then
  DOTFILES_DIRECTORY="$HOME/.dotfiles"
fi

if [ -z "$DOTFILES_REMOTE_REPOSITORY" ]; then
  DOTFILES_REMOTE_REPOSITORY="dweidner/dotfiles"
fi

#
# Options/Flags
#
# $INSTALL_NPM_PACKAGES = Install list of npm packages
# $INSTALL_FORMULAE     = Install list of hombrew formulae
# $UPDATE_SUBMODULES    = Whether to update submodules or not
#

INSTALL_NPM_PACKAGES=0
INSTALL_FORMULAE=0
UPDATE_SUBMODULES=0

#
# Tells users how to use the script.
#
# Usage: usage
#
usage() {
  cat <<EOT

Usage: dotfiles [-h] [-l] [-u] [-n] [-b]

Options:
   -h  Print usage information.
   -l  List submodules installed with the repository.
   -u  Update submodules installed with the repository.
   -n  Install npm packages.
   -b  Install homebrew formulae.

Copyright (c) Daniel Weidner
Licensed under the MIT license.

EOT
}

#
# Check for the existiance of flags and update corresponding
# script variables.
#
# Usage: parse_options args
#
parse_options() {
  set -- "$@"

  local ARGN=$#
  while [ "$ARGN" -ne 0 ]; do
    case $1 in
      -h) usage
          exit 0
          ;;
      -l) list_submodules "$DOTFILES_DIRECTORY"
          exit 0
          ;;
      -u) UPDATE_SUBMODULES=1
          ;;
      -n) INSTALL_NPM_PACKAGES=1
          ;;
      -b) INSTALL_FORMULAE=1
          ;;
      ?*) echo "ERROR: Unknown option."
          usage
          exit 0
          ;;
    esac
    shift
    ARGN=$((ARGN-1))
  done
}

#
# Test whether the current operating system is a version of Mac OSX.
#
# Usage: is_mac
#
is_mac() {
  [[ "$OSTYPE" == darwin* ]]
}

#
# Test whether the given command can be executed.
#
# Usage: is_executable command
#
# $1 = Name of the command to execute.
#
is_executable() {
  test -x "$(command -v "$1")"
}

#
# Test if a homebrew formula is installed on the system.
#
# Usage: is_formula_installed formula
#
# $1 = Name of the homebrew formula.
#
is_formula_installed() {
  brew list "$1" >/dev/null 2>&1
}

#
# Test if xcode command line tools are installed. Note: Only works for OSX 10.9+.
#
# Usage: is_xcode_installed
#
is_xcode_installed() {
  [ $(xcode-select -p >/dev/null; printf $?) -ne 0 ]
}

#
# Test if a given folder is a git repository.
#
# Usage: is_git_repository directory
#
# $1 = Path of the directory.
#
is_git_repository() {
  local dir="$1"

  # Ensure the specified directory exists
  if [[ ! -d "$dir" ]]; then
    return 1
  fi

  # Switch to the directory before running the git command
  pushd "$dir" >/dev/null

  # Test whether the current working directory is a git repository
  if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
    popd >/dev/null
    return 0
  else
    popd >/dev/null
    return 1
  fi
}

#
# Create a symbolic link to a file in the dotfiles repository.
#
# Usage: link dotfile symlink
#
# $1 = Relative path to the file in the dotfiles repository.
# $2 = Relative path from the home directory.
#
link() {
  [ -r "$DOTFILES_DIRECTORY/$1" ] && ln -fs "$DOTFILES_DIRECTORY/$1" "$HOME/$2"
}

#
# Download a compressed archive and extract it to a target
# directory.
#
# Usage: download_archive url target
#
# $1 = Url to load the archive from.
# $2 = Target directory to copy the repository to.
#
download_archive() {
  local src="$1"
  local target="$2"

  # Generate a unique name for the temporary archive
  local prefix
  prefix="$(basename "$0")"
  local tmpfile
  tmpfile="$(mktemp "/tmp/$prefix.tar.gz")"

  # Load and extract the repository
  curl -fsSLo "$tmpfile" "$src"
  tar -zxf "$tmpfile" --strip-components 1 -C "$target"

  # Cleanup the temporary files
  rm -rf "$tmpfile"
}

#
# Strip comments and empty lines from a file.
#
# Usage: strip_comments file
#
# $1 = File to strip comments from.
#
strip_comments() {
  egrep -v "(^#|^$)" "$1"
}

#
# Reads the contents of a file containing a package list.
#
# Usage: read_package_list file
#
# $1 = Name of the package list to read.
#
read_package_list() {
  local filename="$1"
  local filepath="$HOME/.$filename"

  if [[ ! -f "$filepath" ]]; then
    filepath="$DOTFILES_DIRECTORY/misc/$filename"
  fi

  if [ -f "$filepath" ]; then
    strip_comments "$filepath"
  fi
}

#
# Initialize a given directory as git repository.
#
# Usage: initialize_repository dir [remote]
#
#  $1 = Directory to initialize as git repository.
# [$2] = Name of the remote repository.
#
initialize_repository() {
  local dir="$1"
  local remote_repository="$2"

  # Switch to the given directory
  pushd "$dir" >/dev/null

  # Initialize the current directory as git repository
  git init

  # Fetch the remote repository and cleanup local working tree
  if [ -n "$remote_repository" ]; then
    git remote add origin "git@github.com:$repository.git"
    git fetch origin master
    git reset --hard FETCH_HEAD
    git clean -fd
  fi

  # Switch back to the previous directory
  popd >/dev/null
}

#
# Displays an overview of installed submodules.
#
# Usage: list_submodules dir
#
# $1 = Path of the working copy.
#
list_submodules() {
  local dir="$1"
  # TODO: Provide an overview of installed submodules
}

#
# Update all submodules of the given working copy.
#
# Usage: update_submodules dir
#
# $1 = Path of the working copy.
#
update_submodules() {
  local dir="$1"

  # Ensure that a valid directory was given
  if [[ ! -d "$dir" ]]; then
    return 1
  fi

  # Switch to the working copy
  pushd "$dir" >/dev/null

  # Pull remote changes
  git pull --rebase

  # Update submodules
  git submodule update --init --recursive --quiet

  # Revert the changes to the working directory
  popd >/dev/null
}

#
# Install the xcode command line tools.
#
# Usage: isntall_xcode
#
install_xcode() {
  echo "Installing xcode command line tools..."
  xcode-select --install
  check_xcode
}

#
# Install the dotfiles repository to the target directory.
#
# Usage: install_dotfiles path
#
# $1 = Name of the repository to load.
# $2 = Path to install the repository to.
#
install_dotfiles() {
  local repository="$1"
  local dir="$2"

  if [[ -z "$repository" || -z "$dir" ]]; then
    echo "ERROR: Invalid arguments given."
    return 1
  fi

  # Download and extract remote repository
  if [[ ! -d "$dir" ]]; then
    echo "Downloading remote repository..."
    download_archive "https://github.com/$repository/tarball/master" "$dir"
  fi

  # Initialize repository and submodules
  if ! is_git_repository "$dir"; then
    echo "Initializing git repository..."
    initialize_repository "$dir"
  fi

  # Create symbolic links
  [[ $? ]] && link_dotfiles

  # Test if installation was successfull
  [[ -d "$dir" && -z $(is_git_repository "$dir") ]]
}

#
# Create symbolic links between configuration files of the dotfiles repository
# and files in the home directory.
#
# Usage: link_dotfiles
#
link_dotfiles() {
  # Copy `.gitconfig` if it does not exist
  [[ ! -f "$HOME/.gitconfig" ]] && cp "$DOTFILES_DIRECTORY/git/gitconfig" "$HOME/.gitconfig"

  # Create the necessary symbolic links between the `dotfiles` and `HOME`
  link "vim"                  ".vim"
  link "shell/profile"        ".profile"
  link "shell/bash_profile"   ".bash_profile"
  link "shell/bashrc"         ".bashrc"
  link "shell/inputrc"        ".inputrc"
  link "shell/dircolors"      ".dircolors"
  link "zsh/zprofile"         ".zprofile"
  link "zsh/zshrc"            ".zshrc"
  link "git/gitattributes"    ".gitattributes"
  link "git/gitignore"        ".gitignore"
  link "tmux/tmux.conf"       ".tmux.conf"
  link "misc/gemrc"           ".gemrc"
  link "misc/npmrc"           ".npmrc"
  link "misc/ctags"           ".ctags"
  link "misc/agignore"        ".agignore"
  link "misc/eslintrc"        ".eslintrc"
}

#
# Installs a list of npm packages from a configuration file.
#
# Usage: install_npm_packages
#
install_npm_packages() {

  # Ensure npm is installed before installing packages
  if is_executable "npm"; then

    # Read package list into an array
    IFS=$'\r\n' GLOBIGNORE='*'
    local -a packages=($(read_package_list "npmpackages"))
    unset IFS GLOBIGNORE

    # Install packages in one go
    if [ ${#packages[@]} -gt 0 ]; then
      npm install "${packages[@]}" --global --quiet
    else
      echo "WARNING: No package list found."
      return 1
    fi

    # Return the last exit code
    return $?
  fi

  # TODO: Offer to install npm
  return 1
}

#
# Installs a list of npm packages from a configuration file.
#
# Usage: install_homebrew_formulae
#
install_homebrew_formulae() {

  # Ensure homebrew is installed before installing formulae
  if is_executable "brew"; then

    # Read formula list into an array
    IFS=$'\r\n' GLOBIGNORE='*'
    local -a formulae=($(read_package_list "brewformulae"))
    unset IFS GLOBIGNORE

    # Install formulae in one go
    if [ ${#formulae[@]} -gt 0 ]; then

      # Collect missing formulae
      for formula in "${formulae[@]}"; do
        formula_args=($formula)
        if ! is_formula_installed "${formula_args[0]}"; then
          missing=("${missing[@]}" "$formula")
        fi
      done

      # Install missing formulae
      if [ ${#missing[@]} -gt 0 ]; then
        brew update
        brew upgrade
        brew install "${missing[@]}"
        brew cleanup
      fi
    else
      echo "WARNING: No formula list found."
      return 1
    fi

    # Return the last exit code
    return $?
  fi

  # TODO: Offer to install homebrew
  return 1
}

#
# Script entry point
#
# $1 = One of the supported options.
#
main() {
  # Handle script options
  parse_options "$@"

  # Install the repository if not already done
  if ! install_dotfiles "$DOTFILES_REMOTE_REPOSITORY" "$DOTFILES_DIRECTORY"; then
    echo "dotfiles: Could not install dotfiles."
    return 1
  fi

  # Install XCode
  if ! is_xcode_installed; then
    echo "WARNING: The XCode Command Line Tools must be installed first."
    install_xcode
  fi

  # Install all npm packages specified in a configuration file
  if [ "$INSTALL_NPM_PACKAGES" -eq 1 ]; then
    echo "Installing npm packages..."
    if ! install_npm_packages; then
      echo "ERROR: Could not install npm packages."
    fi
  fi

  # Install all homebrew formulae specified in a configuration file
  if [ "$INSTALL_FORMULAE" -eq 1 ]; then
    echo "Installing homebrew formulae..."
    if ! install_homebrew_formulae; then
      echo "ERROR: Could not install homebrew formulae."
      return 1
    fi
  fi

  # Update all dependencies added as submodules to the project
  if [ "$UPDATE_SUBMODULES" -eq 1 ]; then
    echo "Updating submodules..."
    if ! update_submodules "$DOTFILES_DIRECTORY"; then
      echo "ERROR: Could not update submodules."
      return 1
    fi
  fi

  # TODO: Run osxdefaults

  return 0
}

main "$@"
