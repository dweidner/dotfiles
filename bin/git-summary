#!/usr/bin/env bash
#
# @file List project changes for a given date range



# (1) Global Variables -------------------------------------------------- {{{1

DATE_FORMAT="${DATE_FORMAT:-"%Y-%m-%d"}"
TIME_FORMAT="${TIME_FORMAT:-"%H:%M"}"

WEEKDAYS=("Monday" "Tuesday" "Wednesday" "Thursday" "Friday" "Saturday" "Sunday")

MONDAY=1
SUNDAY=7

START_OF_WEEK="${START_OF_WEEK:-$MONDAY}"
END_OF_WEEK="${START_OF_WEEK:-$SUNDAY}"



# (2) Utility Functions ------------------------------------------------- {{{1

#
# Determine whether the given value represents an integer.
#
# usage: is_integer <value>
#
is_integer() {
  [[ "${1}" =~ ^[0-9]+$ ]]
}

#
# Generate a heading text.
#
# usage: heading <heading> [<character>]
#
heading() {
  local heading="${1}"
  echo -e "\n\033[0;34m${heading} $(hr $(( ${#heading} + 1 )))\033[0;m"
}

#
# Generate a table.
#
# usage: table <row> [<row>]
#
table() {
  echo -e "$*" | column -ts $'\t'
}

#
# Draw a horizontal line.
#
# usage: hr [<offset>] [<char>]
#
hr() {
  local offset="${1:-0}"
  local char="${2:-â”€}"

  local columns
  columns=$(tput cols)

  printf "%*s" $(( columns - offset )) " " | tr " " "${char}"
}



# (3) Date Utilities ---------------------------------------------------- {{{1

#
# Convert the given date to a unix timestamp.
#
# usage: get_timestamp [<date>]
#
get_timestamp() {
  local date="${1:-today}"

  if is_integer "${date}"; then
    echo "${date}"
  elif [[ "${date}" == "today" ]]; then
    date "+%s"
  elif [[ "${date}" == "yesterday" ]]; then
    date -v "-1d" "+%s"
  elif [[ "${date}" =~ ^(\+|\-)[0-9]+[dwmy]$ ]]; then
    date -v "${date}" "+%s"
  else
    date -jf "${DATE_FORMAT}" "${date}" "+%s"
  fi
}

#
# Get the week day of a given date.
#
# usage: get_week_day [<date>]
#
get_week_day() {
  date -r "$(get_timestamp "${1:-today}")" "+%u"
}

#
# Get the week number of a given date.
#
# usage: get_week_number [<date>]
#
get_week_number() {
  date -r "$(get_timestamp "${1:-today}")" "+%V"
}

#
# Get the year of a given date.
#
# usage: get_year [<date>]
#
get_year() {
  date -r "$(get_timestamp "${1:-today}")" "+%Y"
}

#
# Get the date of a specific week day in a given week number.
#
# usage: get_day_of_week <year> <week> <weekDay>
#
get_day_of_week() {
  local year="${1}"
  local week="${2}"
  local weekDay="${3}"

  local timestamp
  timestamp="$(date -jf "%Y-%m-%d" "${year}-01-01" "+%s")"
  timestamp="$(date -r "${timestamp}" -v -Monday "+%s")"

  local offset=$(( week - 1 ))
  local index=$(( weekDay - 1 ))

  date -r "${timestamp}" -v "+${offset}w" -v "+${WEEKDAYS[${index}]}" "+%s"
}

#
# Get the date of the first day of a given week number.
#
# usage: get_start_of_week [<year>] [<week>]
#
get_start_of_week() {
  local year="${1}"
  local week="${2}"

  if [[ -z "${year}" ]]; then
    year="$(get_year)"
  fi

  if [[ -z "${week}" ]]; then
    week="$(get_week_number)"
  fi

  get_day_of_week "${year}" "${week}" "${START_OF_WEEK}"
}

#
# Get the date of the last day of a given week number.
#
# usage: get_end_of_week <year> <week>
#
get_end_of_week() {
  local year="${1}"
  local week="${2}"

  if [[ -z "${year}" ]]; then
    year="$(get_year)"
  fi

  if [[ -z "${week}" ]]; then
    week="$(get_week_number)"
  fi

  get_day_of_week "${year}" "${week}" "${END_OF_WEEK}"
}

#
# Change the time of the given date object.
#
# usage: set_time <date> [<hours>] [<minutes>] [<seconds>]
#
set_time() {
  date -r "$(get_timestamp "${1}")" -v "${2:-0}H" -v "${3:-0}M" -v "${4:-0}S" "+%s"
}

#
# Add one day to the given date.
#
# usage: add_day <date>
#
add_day() {
  add_days "${1}" 1
}

#
# Add the given number of days to the date.
#
# usage: add_days <date> [<count>]
#
add_days() {
  date -r "$(get_timestamp "${1}")" -v "+${2:-0}d" "+%s"
}

#
# Add one week to the given date.
#
# usage: add_week <date>
#
add_week() {
  add_weeks "${1}" 1
}

#
# Add the given number of weeks to the date.
#
# usage: add_weeks <date> [<count>]
#
add_weeks() {
  date -r "$(get_timestamp "${1}")" -v "+${2:-0}w" "+%s"
}

#
# Subtract one day from the given date.
#
# usage: sub_day <date>
#
sub_day() {
  sub_days "${1}" 1
}

#
# Subtract the given number of days from the date.
#
# usage: sub_days <date> [<count>]
#
sub_days() {
  date -r "$(get_timestamp "${1}")" -v "-${2:-0}d" "+%s"
}

#
# Subtract one week from the given date.
#
# usage: sub_week <date>
#
sub_week() {
  sub_weeks "${1}" 1
}

#
# Subtract the given number of weeks from the date.
#
# usage: sub_weeks <date> [<count>]
#
sub_weeks() {
  date -r "$(get_timestamp "${1}")" -v "-${2:-0}w" "+%s"
}

#
# Get a formatted date from a timestamp.
#
# usage: format_date <str>
#
format_date() {
  date -jf "%s" "${1}" "+${DATE_FORMAT} ${TIME_FORMAT}"
}




# (4) Git Utilities ----------------------------------------------------- {{{1

#
# Determine whether a given directory is a git directory.
#
# usage: is_repository <path>
#
is_repository() {
  [[ -d "${1}/.git" ]]
}

#
# Determine whether a given user has submitted any commits during a given
# timespan.
#
# usage: has_commits <repository> <author> <from> <to>
#
has_commits() {
  local dir="${1}"
  local author="${2}"
  local from="${3}"
  local to="${4}"

  if [[ ! -d "${dir}" ]]; then
    return 1
  fi

  local count

  count="$(
    git -C "${dir}" shortlog HEAD \
      --summary \
      --author "${author// /\\ }" \
      --after "$(format_date "${from}")" \
      --before "$(format_date "${to}")" \
      2>/dev/null \
      | awk '{ print $1; }'
  )"

  (( count > 0 ))
}

#
# Find all git repositories in a given folder.
#
# usage: find_repositories <path>
#
get_repositories() {
  if [[ -d "${1}" ]]; then
    command find "${1}/"* -type d -name ".git" -maxdepth 1
  fi
}

#
# Get the name of the current user.
#
# usage: get_user_name
#
get_user_name() {
  git config user.name
}

#
# Show a a compact list of commits made by a user during a given timespan.
#
# usage: show_summary <repository> <author> <from> <to>
#
show_summary() {
  local dir="${1}"
  local author="${2}"
  local from="${3}"
  local to="${4}"

  if [[ ! -d "${dir}" ]]; then
    return 1
  fi

  heading "${dir/#${HOME}/\~}"

  git -C "${dir}" log \
    --graph \
    --pretty=nice \
    --date=short \
    --decorate=short \
    --abbrev-commit \
    --topo-order \
    --author "${author// /\\ }" \
    --after "$(format_date "${from}")" \
    --before "$(format_date "${to}")"
}


# (5) Entry Point ------------------------------------------------------- {{{1

#
# Parse the given time interval. Users can provide:
#
# 1. A date range
# 2. A week number
# 3. A single day
#
# By default a summary for the current week will be provided.
#
# usage: parse_timespan <arguments>
#
parse_timespan() {
  local from
  local to

  local today
  local year

  today="$(get_timestamp)"
  year="$(get_year "${today}")"

  if (( $# == 2 )); then
      from="$(get_timestamp "${1}")"
      to="$(get_timestamp "${2}")"
  elif (( $# == 1 )); then
    if is_integer "${1}"; then
      from="$(get_start_of_week "${year}" "${1}")"
      to="$(add_week "${from}")"
      to="$(sub_day "${to}")"
    else
      from="$(get_timestamp "${1}")"
      to="${from}"
    fi
  else
    from="$(get_start_of_week)"
    to="$(add_week "${from}")"
    to="$(sub_day "${to}")"
  fi

  printf "%s\n%s\n" \
    "$(set_time "${from}" "0" "0")" \
    "$(set_time "${to}" "23" "59")"
}

#
# Main entry point of the script.
#
# usage: summary [<date>]
#
main() {
  local candidates="${PROJECT_PATH:-"${HOME}/Sites:${HOME}/Projects"}"

  local author
  author="$(get_user_name)"

  local timespan=()

  while read -r date; do
    timespan+=("${date}")
  done < <(parse_timespan "$@")

  local candidate
  local directory
  local repository

  local from="${timespan[0]}"
  local to="${timespan[1]}"

  heading "PROJECT SUMMARY"
  table "Start date:\t$(format_date "${from}")\nEnd date:\t$(format_date "${to}")\n"

  while read -rd: candidate; do
    while read -r directory; do
      repository="$(dirname "${directory}")"

      if has_commits "${repository}" "${author}" "${from}" "${to}"; then
        show_summary "${repository}" "${author}" "${from}" "${to}"
      fi
    done < <(get_repositories "${candidate}")
  done <<< "${candidates}:"
}

main "$@"


# vim:foldmethod=marker:foldlevel=2
