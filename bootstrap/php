#!/usr/bin/env bash
#
# @file Install cgr and frequently used php packages.

set -e

readonly SCRIPT_DIR="$(dirname "$0")"
readonly DOTFILES="${DOTFILES:-$(dirname "$SCRIPT_DIR")}"

source "${DOTFILES}/shell/utilities.sh"

#
# Remove a single characters from the beginning and end of the given string.
#
# usage: trim <str> [<char>]
#
trim() {
  local str="$1"
  local needle="${2:- }"

  str="${str#$needle}"
  str="${str%$needle}"

  echo "$str"
}

#
# Get the absolute path for a php package maintained by cgr.
#
# usage: cgr_package_path <name> [<path>]
#
cgr_package_path() {
  local root="${COMPOSER_HOME}/global"
  local name="$1"
  local path="$2"

  name="$(trim "$name" "/")"
  path="$(trim "${name}/vendor/${name}/${path}" "/")"

  if [[ -d "${root}/${path}" ]]; then
    echo "${root}/${path}"
  fi
}

#
# Get the value of a phpcs configuration variable.
#
# usage: phpcs_show_config <name>
#
phpcs_show_config() {
  phpcs --config-show \
    | grep "$1" \
    | cut -d: -f2 \
    | sed -e 's/^[[:space:]]*//g'
}

#
# Add a path to a custom coding standard to the configuration list.
#
# usage: phpcs_add_path <path>
#
phpcs_add_path() {
  local paths

  paths="$(phpcs_show_config "installed_paths")"
  paths="$(trim "${paths},${1}" ",")"

  phpcs --config-set installed_paths "$paths"
}

#
# Install cgr, a safer alternative to `composer global require`.
#
# usage: cgr
#
install_cgr() {
  dot::info "Installing cgr …"
  composer global require consolidation/cgr
}

#
# Install frequently used php packages.
#
# usage: install_php_packages
#
install_php_packages() {
  dot::info "Installing php packages …"

  while read -r package; do
    cgr "$package"
  done < "${DOTFILES}/misc/default-php-packages"
}

#
# Configure php code sniffer.
#
# usage: configure_phpcs
#
configure_phpcs() {
  local path

  dot::info "Updating phpcs configuration …"
  phpcs --config-set default_standard PSR2
  phpcs --config-set colors 1
  phpcs --config-set report_width auto

  path="$(cgr_package_path "wp-coding-standards/wpcs")"

  if [[ -r "$path" ]]; then
    dot::info "Adding WordPress coding standards …"
    phpcs_add_path "$path"
  fi

  path="$(cgr_package_path "drupal/coder" "coder_sniffer")"

  if [[ -d "$path" ]]; then
    dot::info "Adding WordPress coding standards …"
    phpcs_add_path "$path"
  fi
}

#
# Install and configure global php utilities.
#
# usage: main [<cmd>]
#
main() {
  if ! dot::command_exists "composer"; then
    dot::exit "Cannot find composer command"
  fi

  local cmd="${1:-install}"

  case "${cmd}" in
    config)
      dot::command_exists "phpcs" && configure_phpcs
      ;;
    *)
      dot::command_exists "cgr" || install_cgr
      dot::command_exists "cgr" && install_php_packages
      ;;
  esac
}

main "$@"
