#!/usr/bin/env bash
#
# @file Create symlinks to dotfiles.

set -e

readonly SCRIPT_DIR="$(dirname "$0")"
readonly DOTFILES="${DOTFILES:-$(dirname "$SCRIPT_DIR")}"

source "${DOTFILES}/shell/utilities.sh"


#
# Create a directory at the given path.
#
# usage: create_directory <path>
create_directory() {
  local directory="$1"

  if [[ ! -d "$directory" ]]; then
    mkdir -p "$directory" && dot::ok "created ${directory}"
  fi
}

#
# Create a list of directories.
#
# usage: create_directories <directory> [<directory>...]
#
create_directories() {
  for directory in "$@"; do
    create_directory "$directory"
  done
}

#
# Create the directory structure for a given file path.
#
# usage: prepare_path <path>
#
prepare_path() {
  local path="$1"
  local dir
  dir="$(dirname "$path")"

  if [[ -d "$dir" ]]; then
    return 0
  fi

  mkdir -p "$dir"
}

#
# Copy a file from the dotfiles repository to the home directory of the
# current user.
#
# usage: copy <source> <target>
#
copy() {
  local source="$DOTFILES/$1"
  local target="$2"

  if [[ -e "${target}" ]]; then
    if ! dot::confirm "overwrite ${target}?"; then
      dot::warning "skipping ${target} …"
      return 1
    fi
  fi

  if ! prepare_path "${target}"; then
    dot::error "could not create parent directory"
    return 1
  fi

  cp -f "${source}" "${target}" \
    && dot::ok "copied file to ${target}"
}

#
# Create a symlink from a file in the dotfiles repository to a file in the
# home directory.
#
# usage: symlink <source> <target>
#
symlink() {
  local source="$DOTFILES/$1"
  local target="$2"

  if [[ -e "${target}" ]]; then
    if ! dot::confirm "overwrite ${target}?"; then
      dot::warning "skipping ${target} …"
      return 1
    fi
  fi

  if ! prepare_path "${target}"; then
    dot::error "could not create parent directory"
    return 1
  fi

  ln -fns "${source}" "${target}" && dot::ok "created symlink at ${target}"
}

#
# Create symlinks to the configuration files shiping with the
# dotfiles-repository.
#
main() {
  local cache_home="${XDG_CACHE_HOME:-$HOME/.cache}"
  local config_home="${XDG_CONFIG_HOME:-$HOME/.config}"
  local data_home="${XDG_DATA_HOME:-$HOME/.local/share}"

  local cache_directories=(
    "${cache_home}"
    "${cache_home}/bundle"
    "${cache_home}/composer"
    "${cache_home}/gem"
    "${cache_home}/npm"
    "${cache_home}/nvim"
    "${cache_home}/vim"
  )

  local data_directories=(
    "${data_home}"
    "${data_home}/bash"
    "${data_home}/bundle"
    "${data_home}/bundle/plugin"
    "${data_home}/dotfiles"
    "${data_home}/gem"
    "${data_home}/less"
    "${data_home}/nvim"
    "${data_home}/tmux"
    "${data_home}/vim"
    "${data_home}/vim/backup"
    "${data_home}/vim/swap"
    "${data_home}/vim/undo"
  )

  dot::info "Creating directories …"

  # Create XDG directories
  create_directory "${config_home}"
  create_directories "${cache_directories[@]}"
  create_directories "${data_directories[@]}"

  # Create symlinks to included configuration files
  # @see {@link https://wiki.archlinux.org/index.php/XDG_Base_Directory_support|XDG Base Directory support}
  #
  # ¹ No XDG directory support
  # ² Partial XDG directory support
  dot::info "Creating symlinks …"

  # Bash¹
  symlink "bash/bash_profile" "${HOME}/.bash_profile"
  symlink "bash/bashrc" "${HOME}/.bashrc" 
  symlink "bash/completions" "${data_home}/bash-completion/completions"

  # Readline²
  symlink "readline/inputrc" "${config_home}/readline/inputrc"

  # Tmux²
  symlink "tmux/tmux.conf" "${config_home}/tmux/tmux.conf"

  # Editorconfig¹
  symlink "misc/editorconfig" "${HOME}/.editorconfig"

  # Git
  symlink "git/ignore" "${config_home}/git/ignore"
  symlink "git/commitmsg" "${config_home}/git/commitmsg"
  copy "git/config" "${config_home}/git/config"

  # Vim¹/Neovim
  symlink "vim/" "${HOME}/.vim"
  symlink "vim/nvimrc" "${config_home}/nvim/init.vim"
  symlink "vim/after" "${config_home}/nvim/after"
  symlink "vim/plugin" "${config_home}/nvim/plugin"
  symlink "vim/autoload" "${config_home}/nvim/autoload"

  # Homebrew¹
  symlink "misc/Brewfile" "${HOME}/.Brewfile"

  # NVM/Node/NPM²
  symlink "misc/default-node-packages" "${config_home}/nvm/default-packages"
  symlink "misc/tern-config" "${HOME}/.tern-config"

  # RVM/Ruby²
  symlink "misc/gemrc" "${config_home}/gem/gemrc"

  # Ctags¹
  symlink "misc/ctags" "${HOME}/.ctags"

  # Ripgrep/The Silver Searcher¹
  symlink "misc/ignore" "${HOME}/.ignore"
}

main "$@"
