" vimrc                                                                   ><>°
"
" -----------------------------------------------------------------------
" Table of Contents
" -----------------------------------------------------------------------
"  1. Environment
"  2. General settings
"  3. Look & Feel
"  4. Indentation & Tabs
"  5. Search & Replace
"  6. Completion System
"  7. Auto Formatting
"  8. Code Folding
"  9. File Globbing
" 10. Key Mappings
" 11. Plugins
" 12. Auto Commands
" -----------------------------------------------------------------------


" (1) Environment ------------------------------------------------------- {{{1

if empty($XDG_CACHE_HOME)  | let $XDG_CACHE_HOME  = '~/.cache'       | endif
if empty($XDG_CONFIG_HOME) | let $XDG_CONFIG_HOME = '~/.config'      | endif
if empty($XDG_DATA_HOME)   | let $XDG_DATA_HOME   = '~/.local/share' | endif

let s:editor       = has('nvim') ? 'nvim' : 'vim'
let s:cache_home   = expand('$XDG_CACHE_HOME/' . s:editor)
let s:config_home  = expand('$XDG_CONFIG_HOME/' . s:editor)
let s:data_home    = expand('$XDG_DATA_HOME/' . s:editor)

let s:terminal_app = $TERM_PROGRAM ==# 'Apple_Terminal'
let s:iterm        = $TERM_PROGRAM ==# 'iTerm.app'

let g:vimrc_home   = fnamemodify(resolve(expand('$MYVIMRC')), ':p:h')
let g:plug_home    = fnamemodify(resolve(s:data_home . '/site/bundle'), ':p:h')
let g:fzf_home     = fnamemodify(resolve(expand('$FZF_DIR')), ':p:h')

let g:vimrc_bundles  = [
      \ 'essentials',
      \ 'development',
      \]

let g:vimrc_features = {
      \  'clipboard':  has('unnamed') || has('nvim'),
      \  'completion': has('nvim') && has('python3'),
      \  'conceal':    has('conceal'),
      \  'truecolors': has('termguicolors') && !s:terminal_app
      \}


" (2) General settings -------------------------------------------------- {{{1

augroup vimrc
  autocmd!
augroup END

set lazyredraw                       " No redraw for macros and commands
set synmaxcol=512                    " Reduce number of columns to highlight
set history=1000                     " Increase number of commands saved
set tabpagemax=50                    " Increase number of tabs
set switchbuf+=useopen               " Reuse open buffers
set fileformats=unix,dos,mac         " Enable automatic fileformat detection

set autoread                         " Reload file if modified outside vim
set undofile                         " Save undo history to file
set undolevels=1000                  " Number of changes saved

if !has('nvim')
  set viminfo+=n$XDG_CACHE_HOME/vim/viminfo
  set directory=$XDG_DATA_HOME/vim/swap//
  set undodir=$XDG_DATA_HOME/vim/undo//
  set backupdir=$XDG_DATA_HOME/vim/backup//
endif


" (3) Look & Feel ------------------------------------------------------- {{{1

set title                            " Use filename as window title
set number                           " Show line numbers
set cursorline                       " Highlight current line
set ruler                            " Display cursor position
set showmode                         " Display the current vim mode
set showcmd                          " Show currently running command
set signcolumn="yes"                 " Always display the sign column

set mouse=a                          " Enable mouse support. Shame on me...
set clipboard^=unnamed               " Use system clipboard register
set scrolloff=8                      " Min. lines to keep above/below
set sidescrolloff=16                 " Min. cols to keep left/right

set laststatus=2                     " Always display the status line
set signcolumn=yes                   " Always display the sign column
set previewheight=16                 " Increase height of the preview window
set pumheight=10                     " Limit visible entries in popups
set shortmess-=f                     " Stop hiding the file label
set shortmess+=ilmnrotwxIOW          " Abbreviate message output

set nowrap                           " No line wrapping by default
set hidden                           " Hide abandoned buffers 
set nostartofline                    " Do not reset cursor on buffer switch
set nojoinspaces                     " Disable extra spaces
set splitright                       " Split to the right
set splitbelow                       " Split to the bottom

set list                             " Show invisible characters
set listchars=tab:→\                 " Show tab stops
set listchars+=trail:·               " Show trailing spaces
set listchars+=nbsp:⣿                " Show non breaking spaces
set listchars+=extends:»             " Line continues off-screen
set listchars+=precedes:«            " Line precedes off-screen
"set listchars+=eol:¬                " Show end of line markers 

set showbreak=↪\                     " Show line breaks
set fillchars=vert:│                 " Vertical seperator for splits
set fillchars+=diff:⣿                " Fill character for blank lines 

set diffopt+=vertical                " Start diff mode with vertical splits
set diffopt+=filler                  " Keep sides aligned
set diffopt+=iwhite                  " Ignore whitespace changes


" (4) Indentation & Tabs ------------------------------------------------ {{{1

set autoindent                       " Start indentation at same position
set nosmartindent                    " Prefer syntax indentexpr
set nopreserveindent                 " Keep block comments properly aligned
set smarttab                         " Insert blanks according to shiftwidth
set expandtab                        " Expand <Tab>s with spaces
set tabstop=2                        " Properly align files with tabs
set shiftwidth=2                     " Spaces for each tabstop of (auto)indent
set softtabstop=2                    " Set virtual tab stop
set noshiftround                     " Helps with block comment indentation

set backspace=indent,eol,start       " Delete everything with bs


" (5) Search & Replace -------------------------------------------------- {{{1

set showmatch                         " Highlight matching parenthesis
set incsearch                         " Highlight dynamically while typing
set hlsearch                          " Highlight matches of previous search
set ignorecase                        " Ignore case when searching
set smartcase                         " Be case-sensitive when using capitals

if executable('rg')
  set grepprg=rg\ --vimgrep
  set grepformat^=%f:%l:%c:%m
elseif executable('ag')
  set grepprg=ag\ --nogroup\ --nocolor\ --column
  set grepformat^=%f:%l:%c:%m
endif


" (6) Completion System ------------------------------------------------- {{{1

set complete-=i                      " Don't scan included files
set complete-=t                      " Avoid tag completion
set completeopt+=menu                " Show possible completions in a popup
set completeopt+=menuone             " Show the popup even for single match


" (7) Auto Formatting --------------------------------------------------- {{{1

set formatoptions-=o                  " Don't insert comment leader after o/O
set formatoptions-=l                  " Don't break long lines
set formatoptions+=n                  " Recognize numbered lists in comments
set formatoptions+=j                  " Remove comment leader when joining

set nrformats-=octal                  " Don't use octals when incrementing


" (8) Code Folding ------------------------------------------------------ {{{1

set nofoldenable                      " Open all folds by default
set foldlevelstart=99


" (9) File Globbing ----------------------------------------------------- {{{1

set wildmenu                          " Enhanced command line completion
set wildmode=list:longest,full        " Set wildmenu to list choice

set wildignore+=*.o,*.obj,*.exe,*.dll,*.jar,*.pyc,*.rbc,*.class
set wildignore+=*.jpg,*.jpeg,*.png,*.gif,*.tiff,*.webp,*.ai,*.psd
set wildignore+=*.avi,*.m4a,*.mp3,*.oga,*.ogg,*.wav,*.webm
set wildignore+=*.pdf,*.doc,*.docx,*.xls,*.xlsx,*.ppt,*.pptx
set wildignore+=*.zip,*.tar,*.tar.gz,*.dmg
set wildignore+=*.*~,*~,._*,*.swp,.lock,.DS_Store,tags.lock
set wildignore+=.sass-cache
set wildignore+=*.min.*,*-min.*


" a) General ------------------------------------------------------------ {{{2

" Using space as leader makes sense, as it is easy to reach and does not have
" a special meaning (in vim’s normal mode). Unfortunatly with space as leader
" nothing is displayed, when using showmode. As a workaround we simply map
" space to the default leader key.
map <Space> <Leader>

" Ensure that InsertLeave is fired, when quiting insert mode with Ctrl-c
inoremap <C-c> <Esc>

" Expand %% to the same directory of the current file
cnoremap %% <C-R>=fnameescape(expand('%:h')).'/'<CR>

" Reselect visual blocks
xnoremap < <gv
xnoremap > >gv

" qq to record, Q to replay a macro
nmap Q @q

" b) Movement ----------------------------------------------------------- {{{2

" Disable arrow keys and take of the training wheels
nnoremap <Up> <Nop>
nnoremap <Right> <Nop>
nnoremap <Down> <Nop>
nnoremap <Left> <Nop>
inoremap <Up> <Nop>
inoremap <Right> <Nop>
inoremap <Down> <Nop>
inoremap <Left> <Nop>

" Move to the beginning/end of the line instead of the top/bottom window
" @see <https://bitbucket.org/sjl/dotfiles>
nnoremap H ^
nnoremap L $

" Faster linewise scrolling
nnoremap <C-e> 3<C-e>
nnoremap <C-y> 3<C-y>

" c) Window/Buffer Management ------------------------------------------- {{{2

" Switch to alternate buffer
nnoremap <Leader><Space> <C-^>

" Circular window navigation
nnoremap <Tab> <C-w>w
nnoremap <S-Tab> <C-w>W

" d) Search/Replace ----------------------------------------------------- {{{2

" Hide matches from previous search
noremap <silent> <Leader>/ :nohlsearch<CR>

" Shortcuts for vim's :substitute (using @ allows searching for paths)
nnoremap <Leader>s :%s@@@gc<Left><Left><Left><Left>
nnoremap <Leader>S :%s@@@g<Left><Left><Left>

" e) Formatting --------------------------------------------------------- {{{2

" Auto format current buffer
nnoremap <Leader>= ggVG=

" f) Localization ------------------------------------------------------- {{{2

" Some key mappings are hard to reach on a german keyboard. As a workaround I
" remap the Umlaut keys on a german keyboard to the corresponding keys in an
" ASCII/US layout. That helps at least in vim’s normal mode.

" Jump forward/backward
map ü [
map + ]
noremap Ü {
noremap * }
map üü [[
map ++ ]]
map ü+ []
map +ü ][

" Search forward/backward
noremap - /
noremap _ ?

" Search word under cursor forward/backward
noremap ' *

" Repeat latest f, t, F or T
noremap ö ;
noremap Ö :

" Jump to mark/Execute contents of register
noremap ä '
noremap Ä @

" Jump to the definition of the keyword
nnoremap <Leader>+ g<C-]>
vnoremap <Leader>+ g<C-]>
nnoremap <Leader>* <C-w>g}
vnoremap <Leader>* <C-w>g}

" Localization of custom bindings
nmap <silent> <Leader>- <Leader>/
nmap <silent> <Leader>´ <Leader>=


" (11) Plugins ---------------------------------------------------------- {{{1

" Load a local configuration file. Allows users to customize the bundles
" to load or to add custom keybindings.
if filereadable('~/.local/vimrc') | source '~/.local/vimrc' | endif

" Conditionally load a plugin (@see https://git.io/vd71n)
function! PlugIf(condition, ...) abort
  let l:options = a:condition ? {} : { 'on': [], 'for': [] }
  return a:0 > 0 ? extend(l:options, a:1) : l:options
endfunction

" Determine whether a given feature is supported
function! IsSupported(...) abort
  return call('dw#IsSupported', a:000)
endfunction

" (Re-)generates the remote plugin manifest
function! DoGenerateManifest(plug) abort
  UpdateRemotePlugins
endfunction

" Use composer to install PHP package dependencies with a plugin
function! DoComposerInstall(plug) abort
  silent !composer install
  silent !composer run-script parse-stubs
endfunction

" Use npm to install node package dependencies with a plugin
function! DoNpmInstall(plug) abort
  silent !npm install
endfunction


call plug#begin()

  " a) Essentials ------------------------------------------------------- {{{2
  " |- ack: Search file contents for patterns
  " |- bbye: Close buffers and don’t mess up window layout
  " |- commentary: Toggle comments
  " |- cylce: Cycle text within predefined candidates
  " |- easyclip: Simplify clipboard functonality
  " |- easydir: Create nonexisting directories when writing files
  " |- endwise: Wisely end language structures
  " |- eunuch: Execute unix shell commands from vim
  " |- fugitive: Execute git commands from vim
  " |- lastplace: Reopen file at last edit position
  " |- one: Atom one color scheme
  " |- repeat: Enable repeating supported plugin maps
  " |- surround: Wrap text objects
  " |- unimpaired: Handy bracket key mappings
  " |- fzf: A fuzzy finder

  if index(g:vimrc_bundles, 'essentials') >= 0

    Plug 'mileszs/ack.vim'
    Plug 'moll/vim-bbye'
    Plug 'tpope/vim-commentary'
    Plug 'bootleq/vim-cycle', { 'on': [ '<Plug>Cycle' ] }
    Plug 'svermeulen/vim-easyclip', PlugIf(IsSupported('clipboard'))
    Plug 'duggiefresh/vim-easydir'
    Plug 'tpope/vim-endwise'
    Plug 'tpope/vim-eunuch'
    Plug 'tpope/vim-fugitive'
    Plug 'farmergreg/vim-lastplace'
    Plug 'rakr/vim-one'
    Plug 'tpope/vim-repeat'
    Plug 'tpope/vim-surround'
    Plug 'tpope/vim-unimpaired'

    if isdirectory(g:fzf_home)
      Plug g:fzf_home, { 'as': 'fzf' }
      Plug 'junegunn/fzf.vim'
    endif

  endif

  " b) Web Development -------------------------------------------------- {{{2
  " |- editorconfig: Load options from config file
  " |- investigate: Look up documentation (gK)
  " |- neomake: Asynchronous file linting
  " |- neosnippet: Enable snippet manager
  " |- signify: Show file changes in gutter
  " |- textobj-user:  Create custom text objects
  " |- textobj-url: Custom text object for urls (u)
  " |- textobj-xmlattr: Custom text object for html attributes (x)

  if index(g:vimrc_bundles, 'development') >= 0

    Plug 'editorconfig/editorconfig-vim'
    Plug 'keith/investigate.vim'
    Plug 'neomake/neomake'
    Plug 'Shougo/neosnippet'
    Plug 'mhinz/vim-signify'

    Plug 'kana/vim-textobj-user'
    Plug 'mattn/vim-textobj-url', { 'on': [ '<Plug>(textobj-url' ] }
    Plug 'whatyouhide/vim-textobj-xmlattr', { 'on': [ '<Plug>(textobj-xmlattr' ] }

  endif

  " c) Syntax Highlighting & Indentation Rules -------------------------- {{{2
  " |- css3: Syntax highlighting for the latest CSS properties
  " |- git: Filetypes and syntax for gitconfig, gitcommit, etc…
  " |- html5: HTML5 syntax and omnicompletion
  " |- javascript: Improved Javascript indentation and syntax support
  " |- json: Improved JSON highlighting
  " |- jsx: React JSX syntax highlighting and indenting
  " |- less: Syntax for LESS (dynamic CSS)
  " |- liquid: Liquid templates with jekyll additions
  " |- php: Syntax highlighting for PHP 7.x
  " |- php-indent: Latest indentation rules for php
  " |- tmux: Syntax for tmux configuration
  " |- twig: Syntax and indentation for twig templates
  " |- scss: Syntax for SCSS (Sassy CSS)
  " |- vue: Syntax highlighting for Vue components
  " |- yaml: Improved and faster syntax highlighting for yaml

  if index(g:vimrc_bundles, 'development') >= 0

    Plug 'hail2u/vim-css3-syntax'
    Plug 'tpope/vim-git'
    Plug 'othree/html5.vim'
    Plug 'pangloss/vim-javascript'
    Plug 'elzr/vim-json'
    Plug 'mxw/vim-jsx'
    Plug 'groenewege/vim-less'
    Plug 'tpope/vim-liquid'
    Plug 'StanAngeloff/php.vim', { 'for': [ 'php' ] }
    Plug '2072/PHP-Indenting-for-Vim'
    Plug 'cakebaker/scss-syntax.vim'
    Plug 'tmux-plugins/vim-tmux'
    Plug 'lumiliet/vim-twig'
    Plug 'posva/vim-vue'
    Plug 'stephpy/vim-yaml'

  endif

  " d) Completion Manager ---------------------------------------------- {{{2
  " |- nvim-completion-manager: Fast and extensible completion framework
  " |- ncm-css: CSS completion for CSS, SASS and LESS
  " |- neco-vim: Vim completion sources for deoplete/ncm
  " |- nvim-cm-tern: JavaScript completion using ternjs code analysis
  " |- languageclient: Vim support for the Language Server Protocol
  " |- languageserver-php: PHP implementation of the LSP

  if index(g:vimrc_bundles, 'development') >= 0

    Plug 'roxma/nvim-completion-manager', PlugIf(IsSupported('completion'), { 'on': [] })
    Plug 'calebeby/ncm-css', PlugIf(IsSupported('completion'))
    Plug 'Shougo/neco-vim', PlugIf(IsSupported('completion'))

    if executable('npm')
      Plug 'roxma/nvim-cm-tern', PlugIf(IsSupported('completion'), { 'do': function('DoNpmInstall') })
    endif

    if executable('composer')
      Plug 'autozimu/LanguageClient-neovim', PlugIf(IsSupported('completion'), { 'do': function('DoGenerateManifest') })
      Plug 'roxma/LanguageServer-php-neovim', PlugIf(IsSupported('completion'), { 'do': function('DoComposerInstall') })
    endif

  endif

call plug#end()


" (12) Auto Commands ---------------------------------------------------- {{{1

augroup vimrc

  " Dynamically hide the cursorline
  autocmd WinEnter    * set cursorline
  autocmd WinLeave    * set nocursorline
  autocmd InsertEnter * set nocursorline
  autocmd InsertLeave * set cursorline

augroup END


" }}}1


set secure


" vim:foldmethod=marker:foldlevel=2
