" vimrc                             ><>

set nocompatible

" -------------------------------------
" Table of Contents
" -------------------------------------
"  1. Vim Plugins
"  2. General Settings
"  3. Look & Feel
"  4. Indentation and Tabs
"  5. Searching
"  6. Completion
"  7. Auto Formatting
"  8. Spell Checking
"  9. Code Folding
" 10. File Globbing
" 11. Input & Mappings
" 12. Auto Commands
" -------------------------------------


" 1. Vim Plugins ---------------------- {{{1

let g:vim_home  = fnamemodify(resolve(expand('$MYVIMRC')), ':p:h')
let g:plug_home = g:vim_home . '/bundle'

let s:use_mac_plugins = has('mac')
let s:use_fzf_plugin  = !has('gui_running') && isdirectory("/usr/local/opt/fzf")

call plug#begin()

  " a) Appearance --------------------- {{{2
  " ¹  Start screen for vim
  " ²  Customize vim's statusline
  " ³  Show file changes in gutter
  " ⁴  Highlight colors in CSS/SASS
  " ⁵  Highlight overly long lines
  " -----------------------------------
  Plug 'mhinz/vim-startify'
  Plug 'itchyny/lightline.vim'
  Plug 'airblade/vim-gitgutter'
  Plug 'ap/vim-css-color',              { 'for': ['css', 'less', 'sass', 'scss'] }
  Plug 'whatyouhide/vim-lengthmatters', { 'on': ['LengthmattersEnable', 'LengthmattersDisable', 'LengthmattersToggle'] }

  " b) System Integration ------------- {{{2
  " ¹  Navigate files/buffers
  " ²  Open locally modified files
  " ³  Search file contents
  " ⁴  Unix utilities in vim
  " ⁵  Git integration
  " ⁶  Look up documentation
  " ⁷  Integrate fuzzy file finder
  " -----------------------------------
  Plug 'ctrlpvim/ctrlp.vim'
  Plug 'jasoncodes/ctrlp-modified.vim'
  Plug 'mileszs/ack.vim'
  Plug 'tpope/vim-eunuch'
  Plug 'tpope/vim-fugitive'

  if s:use_mac_plugins
    Plug 'keith/investigate.vim'
  endif
  if s:use_fzf_plugin
    Plug '/usr/local/opt/fzf'
  endif

  " c) Text Editing ------------------- {{{2
  " ¹  Check file syntax
  " ²  Wrap text objects
  " ³  Highlight/remove trailing spaces
  " ⁴  Align text elements
  " ⁵  Toggle comments
  " ⁶  Write html markup easily
  " -----------------------------------
  Plug 'scrooloose/syntastic'
  Plug 'tpope/vim-surround'
  Plug 'tpope/vim-unimpaired'
  Plug 'ntpeters/vim-better-whitespace'
  Plug 'junegunn/vim-easy-align', { 'on': ['EasyAlign', '<Plug>(EasyAlign)'] }
  Plug 'ciaranm/detectindent',    { 'on': 'DetectIndent' }
  Plug 'tpope/vim-commentary',    { 'on': '<Plug>Commentary' }
  Plug 'mattn/emmet-vim',         { 'for': ['html', 'html5', 'html.twig', 'php', 'css', 'scss', 'sass'] }

  " d) Completion --------------------- {{{2
  " ¹  HTML5 & SVG omnicomplete
  " ²  Snippet manager
  " ³  Tab or Auto-Complete
  " ⁴  PHP omnicomplete
  " -----------------------------------
  Plug 'othree/html5.vim'
  Plug 'SirVer/ultisnips',           { 'on': [] }
  Plug 'Valloric/YouCompleteMe',     { 'on': [], 'do': function('dw#BuildYCM') }
  Plug 'shawncplus/phpcomplete.vim', { 'for': 'php' }

  " e) Syntax/File Type Additions ----- {{{2
  " ¹  Update syntax and indentation
  " ²  Load *.md files as markdown
  " ³  Highlighting & quote concealing
  " ⁴  Add Liquid & Jekyll support
  " ⁵  Improve higlighting for SASS
  " ⁶  Improve support for CSS3
  " ⁷  Support PHP 5.6 features
  " ⁸  Improve hilighting for Twig
  " ⁹  Add ES6 support
  " ¹⁰ Improve js indentation
  " -----------------------------------
  Plug 'tpope/vim-git'
  Plug 'tpope/vim-markdown'
  Plug 'elzr/vim-json'
  Plug 'tpope/vim-liquid'
  Plug 'cakebaker/scss-syntax.vim'
  Plug 'hail2u/vim-css3-syntax',    { 'for': ['css', 'scss'] }
  Plug 'StanAngeloff/php.vim',      { 'for': 'php' }
  Plug 'evidens/vim-twig',          { 'for': 'html.twig' }
  Plug 'othree/yajs.vim',           { 'for': 'javascript' }
  Plug 'gavocanov/vim-js-indent',   { 'for': 'javascript' }

  " f) Misc/Utility ------------------- {{{2
  " ¹  Auto-generate ctags
  " ²  Auto update working directory
  " ³  Support async commands
  " ⁴  Create parent directories
  " ⁵  Remember cursor position
  " ⁶  Fix cursor/focus events in tmux
  " ⁷  Repeat plugin commands
  " ⁸  Simplified cut & paste
  " -----------------------------------
  Plug 'ludovicchabant/vim-gutentags'
  Plug 'airblade/vim-rooter'
  Plug 'tpope/vim-dispatch'
  Plug 'duggiefresh/vim-easydir'
  Plug 'dietsche/vim-lastplace'
  Plug 'sjl/vitality.vim'
  Plug 'tpope/vim-repeat'
    \| Plug 'svermeulen/vim-easyclip'

  " g) Try out ------------------------ {{{2
  " ¹  Auto-generate jsdoc tags
  " ²  Paramter completion for js
  " ³  Syntax completion for js
  " ⁴  Better increament via Ctrl-A/X
  " ⁵  Load tab settings from config
  " ⁶  Replacement for CtrlP
  " ⁷  Substitute preview
  " -----------------------------------
  " Plug 'heavenshell/vim-jsdoc'
  " Plug 'marijnh/tern_for_vim', { 'do': 'npm install' }
  " Plug '1995eaton/vim-better-javascript-completion'
  " Plug 'nishigori/increment-activator'
  " Plug 'sgur/vim-editorconfig'
  " Plug 'Shougo/unite.vim'
  "      \| Plug 'Shougo/vimfiler.vim'
  "      \| Plug 'Shougo/unite-outline'
  "      \| Plug 'tsukkee/unite-tag'
  " Plug 'osyo-manga/vim-over'

  " }}}

call plug#end()

augroup lazyload
  autocmd!
  autocmd InsertEnter * call plug#load('ultisnips', 'YouCompleteMe')
        \| call UltiSnips#FileTypeChanged()
        \| call youcompleteme#Enable()
        \| autocmd! lazyload
augroup END


" 2. General settings ----------------- {{{1

augroup vimrc
  autocmd!
augroup END

set encoding=utf-8                    " Encoding used in vim
set lazyredraw                        " No redraw for macros and commands
set synmaxcol=512                     " Reduce number of columns to highlight
set history=1000                      " Increase number of commands saved
set switchbuf+=useopen                " Reuse open buffers
set clipboard+=unnamed                " Use system clipboard by default
set fileformats=unix,dos,mac          " Enable automatic fileformat detection

set autoread                          " Reload file if modified outside vim
set noswapfile                        " Do not create swap files for buffers
set undofile                          " Save undo history to file
set undolevels=500                    " Reduce number of changes saved

exe 'set viminfo+=n' . g:vim_home . '/tmp/viminfo'
exe 'set directory=' . g:vim_home . '/tmp/swap//'
exe 'set undodir='   . g:vim_home . '/tmp/undo//'
exe 'set backupdir=' . g:vim_home . '/tmp/backup//'


" 3. Look & Feel ---------------------- {{{1

if has('gui_running')

  "set guifont=Menlo\ Regular:h15      " Select font to use
  "set linespace=2                     " Increase spacing between lines

  set guifont=CamingoCode\ Regular:h16 " Prefer CamingoCode if available
  set guioptions-=m                    " Hide menubar
  set guioptions-=T                    " Hide toolbar

  set columns=180 lines=50             " Provide enough space for two panes

endif

colorscheme solarized                 " Select color theme to use

set title                             " Use filename as window title
set number                            " Show line numbers
set cursorline                        " Highlight current line
set ruler                             " Display cursor position
set showcmd                           " Show currently running command
set noshowmode                        " Mode is displayed in lightline already
set nowrap                            " No line wrapping by default

set shortmess=aIT                     " Use abbreviation in messages
set showtabline=0                     " Never show tabs
set laststatus=2                      " Always display the status line
set pumheight=10                      " Limit visible entries of the popup menu

set scrolloff=8                       " Min. lines to keep above/below
set sidescrolloff=16                  " Min. cols to keep left/right

set hidden                            " Hide modified buffers & don't complaint
set splitright                        " Split to the right
set splitbelow                        " Split to the bottom
set nostartofline                     " Do not reset cursor on buffer switch
set nojoinspaces                      " Use only one space after a '.'

set list                              " Show invisible characters
set listchars=tab:→\                  " Show tab stops
set listchars+=trail:·                " Show trailing spaces
set listchars+=nbsp:⣿                 " Show non breaking spaces
set listchars+=extends:»              " Line continues off-screen
set listchars+=precedes:«             " Line precedes off-screen
"set listchars+=eol:¬                 " Show end of line markers

set showbreak=↪\                      " Show line breaks
set fillchars=vert:│                  " Vertical seperator for splits
set fillchars+=diff:⣿                 " Fill character for blank lines

set diffopt+=vertical                 " Start diff mode with vertical splits
set diffopt+=filler                   " Keep the windows synchronized
set diffopt+=iwhite                   " Ignore changes in amount of whitespace


" 4. Indentation and Tabs ------------- {{{1

set autoindent                        " Start indentation at same position
set copyindent                        " Copy indent structure of existing lines
set smarttab                          " Insert blanks according to shiftwidth
set expandtab                         " Expand <Tab>s with spaces
set tabstop=2                         " Proper display of files with tabs
set shiftwidth=2                      " Spaces for each tabstop of (auto)indent
set softtabstop=2                     " Set virtual tab stop
set noshiftround                      " Round indents to multiple of shiftwidth

set backspace=indent,eol,start        " Delete everything with bs


" 5. Searching ------------------------ {{{1

set showmatch                         " Highlight matching parenthesis
set incsearch                         " Highlight dynamically while typing
set hlsearch                          " Highlight matches of previous search
set ignorecase                        " Ignore case when searching
set smartcase                         " Be case-sensitive when using capitals

if executable('ag')
  let &grepprg = 'ag --nogroup --nocolor --column'
endif


" 6. Completion ----------------------- {{{1

set complete-=i                       " Don't scan included files
set complete-=t                       " Avoid tag completion
set completeopt+=longest              " Only insert the longest common text
set completeopt+=menu                 " Show possible completions in a popup
set completeopt+=menuone              " Show the popup event for single match
set completeopt-=preview              " Hide extra information in pum


set matchpairs+=<:>                   " Change html tags with ci< or ci>


" 7. Auto Formatting ------------------ {{{1

set formatoptions-=o                  " Don't insert comment leader after o/O
set formatoptions-=l                  " Don't break lines that are alread long
set formatoptions+=n                  " Recognize numbered lists in comments
set formatoptions+=j                  " Remove comment leader when joining

set nrformats-=octal                  " Don't use octals when incrementing


" 8. Spell Checking ------------------- {{{1

set nospell                           " Disable spell checking by default
set spelllang=en,de                   " Languages to use for spell checks

exe 'set spellfile+=' . g:vim_home . '/spell/en.utf-8.add'
exe 'set spellfile+=' . g:vim_home . '/spell/de.utf-8.add'


" 9. Code Folding --------------------- {{{1

set foldcolumn=0                      " Do not show a fold column
set nofoldenable                      " Open all folds by default
set foldlevel=99
set foldlevelstart=99


" 10. File Globbing ------------------- {{{1

set wildmenu                          " Visual autocomplete for command menu
set wildmode=list:longest             " Set wildmenu to list choice

set wildignore+=*/.git/*,*/.hg/*,*/.svn/*
set wildignore+=*.jpg,*.jpeg,*.png,*.gif,*.tiff,*.psd
set wildignore+=*.zip,*.tar,*.tar.gz,*.dmg
set wildignore+=*.pdf,*.doc,*.docx,*.xls,*.xlsx,*.ppt,*.pptx
set wildignore+=*.mp3,*.mp4,*.mov
set wildignore+=*.gem,gems/**
set wildignore+=*/node_modules/**
set wildignore+=*/tmp/**,.DS_Store,Icon


" 11. Input & Mappings ---------------- {{{1

set ttyfast                           " Optimize for fast terminal connection
set timeoutlen=500                    " Time waited for a key code to complete
set mouse=a ttymouse=xterm2           " Enable mouse support. Shame on me...


" a) General -------------------------- {{{2

" Using space as leader makes sense,
" as it is easy to reach and does not
" have a special meaning (in vim’s
" normal mode). Unfortunatly with
" space as leader nothing is
" displayed, when using showmode. As
" a workaround we simply map space to
" the default leader key.
map <Space> <Leader>

" Avoid the escape key
inoremap jk <Esc>
xnoremap jk <Esc>
cnoremap jk <C-c>

" Ensure that InsertLeave is fired,
" when quiting insert mode with Ctrl-c
inoremap <C-c> <Esc>

" Expand %% to the same directory of
" the current file
cnoremap %% <C-R>=fnameescape(expand('%:h')).'/'<CR>

" Reselect visual block
xnoremap < <gv
xnoremap > >gv


" b) Localization --------------------- {{{2

" Some keys are simply hard to reach on
" a german keyboard. I use the keys for
" Umlauts to make some of them more
" accessible in normal mode.

" Square/curly bracket commands
map ü [
map + ]
noremap Ü {
noremap * }

" Section forward/backward
map üü [[
map ++ ]]
map ü+ []
map +ü ][

" Access the shadowed star operator
noremap ö *
noremap Ö #

" Single/double quotes
noremap ä '
noremap Ä "

" Search forward/backward
noremap - /
noremap _ ?

" Jump to the definition of the keyword
nnoremap <Leader>+ <C-]>


" c) Movement ------------------------- {{{2

" Move to the beginning/end of the line
" instead of the top/bottom window
" @see <https://bitbucket.org/sjl/dotfiles>
nnoremap H ^
nnoremap L $
vnoremap L g_

" Faster linewise scrolling
nnoremap <C-e> 3<C-e>
nnoremap <C-y> 3<C-y>

" Select previously changed or yanked text
nnoremap <Leader>v '[v']

" Movement in insert mode
inoremap <C-h> <C-o>h
inoremap <C-l> <C-o>a
inoremap <C-j> <C-o>j
inoremap <C-k> <C-o>k


" d) Window/Buffer Management --------- {{{2

" Switch to alternate buffer
nnoremap <Leader><Space> <C-^>

" Save the current buffer
nnoremap <C-s> :update<CR>
inoremap <C-s> <C-o>:update<CR>

" Open file in new buffer
if exists("g:plugs['fzf']")
  nnoremap <Leader>o :FZF<CR>
else
  nnoremap <Leader>o :CtrlP<CR>
endif

" Close the current or all windows
nnoremap <Leader>q :quit<CR>
nnoremap <Leader>Q :quitall!<CR>
nnoremap <C-q> :quit<CR>
inoremap <C-q> <Esc>:quit<CR>

" Circular window navigation
nnoremap <Tab> <C-w>w
nnoremap <S-Tab> <C-w>W

" Split window vertically/horizontally
nnoremap <Leader>wv <C-w>v<C-w>l
nnoremap <Leader>ws <C-w>s<C-w>j

" Load frequently used window layouts
nnoremap <Leader>w1 <C-w>o
nnoremap <Leader>w2 <C-w>s<C-w>k
nnoremap <Leader>w3 <C-w>s<C-w>j<C-w>v<C-w>k
nnoremap <Leader>w4 <C-w>s<C-w>v<C-w>k<C-w>v<C-w>h


" e) Search/Replace ------------------- {{{2

" Hide matches from previous search
noremap <silent> <Leader>/ :nohls<CR>
noremap <silent> <Leader>- :nohls<CR>

" Shortcuts to vim's :substitute
" Using @ as a separator to allow searching for /
nnoremap <Leader>s :%s@@@gc<Left><Left><Left><Left>
nnoremap <Leader>S :%s@@@g<Left><Left><Left>
vnoremap <Leader>s :<C-u>%s@\%V@@gc<Left><Left><Left><Left>
vnoremap <Leader>S :<C-u>%s@\%V@@g<Left><Left><Left>


" f) Misc ----------------------------- {{{2

" Swap lines using vim-unimpaired
" @see <https://github.com/davidosomething/dotfiles>
nmap <special> <C-k> [e
nmap <special> <C-j> ]e
vmap <special> <C-k> [egv
vmap <special> <C-j> ]egv

" Start EasAlign in interacitve mode
nmap ga <Plug>(EasyAlign)
xmap ga <Plug>(EasyAlign)

" Lazy load vim-commentary and toggle comment
map  gc  <Plug>Commentary
nmap gcc <Plug>CommentaryLine

" qq to record, Q to replay a macro
nmap Q @q

" Insert the current time/date
" @see <https://https://github.com/mhinz/dotfiles>
inoremap <silent> <c-g><c-t> <c-r>=repeat(complete(col('.'), map(["%H:%M:%S", "%H:%M"],'strftime(v:val)')+[localtime()]), 0)<cr>
inoremap <silent> <c-g><c-d> <c-r>=repeat(complete(col('.'), map(["%A, %d %B %Y", "%d %B %Y", "%d.%m.%Y", "%Y%m%d"],'strftime(v:val)')+[localtime()]), 0)<cr>

"}}}2


" 12. Auto Commands ------------------- {{{1

augroup vimrc

  " Dynamically hide the cursorline
  autocmd WinEnter    * set cursorline
  autocmd WinLeave    * set nocursorline
  autocmd InsertEnter * set nocursorline
  autocmd InsertLeave * set cursorline

augroup END

" }}}1


set secure

" vim:foldmethod=marker:foldlevel=2
