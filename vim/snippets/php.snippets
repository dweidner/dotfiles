# --------------------------------------------------------------
# Selection of PHP snippets extracted from honza/vim-snippets
# @see <https://github.com/honza/vim-snippets>
# --------------------------------------------------------------


# Mixed Markup -------------------------------------------------
snippet <?
	<?php

	${0}
snippet ?e
	<?php echo ${0}; ?>
snippet ?
	<?php ${0} ?>
snippet ?if
	<?php if(${1}): ?>
		${0}
	<?php endif; ?>
snippet ?ifelse
	<?php if(${1}): ?>
		${2}
	<?php else: ?>
		${0}
	<?php endif; ?>
snippet ?elseif
	<?php elseif: ?>
snippet ?for
	<?php for ($${2:i} = 0; $$2 < ${1:$count}; $$2++): ?>
		${0}
	<?php endfor; ?>
snippet ?foreach
	<?php foreach ($${1} as $${2}): ?>
		${0}
	<?php endforeach; ?>
snippet ?keyvalue
	<?php foreach ($${1} as $${2:key} => $${3:value}): ?>
		${0}
	<?php endforeach; ?>
# Control Structures -------------------------------------------
snippet if
	if (${1}) {
		${2}
	}${0}
snippet else
	else {
		${1}
	}${0}
snippet ifelse
	if (${1}) {
		${2}
	}
	else {
		${3}
	}${0}
snippet elseif
	elseif (${1}) {
		${0}
	}
snippet switch
	switch($${1}) {
		case '${2}':
			${3}
			break;
		${0}
	}
snippet case
	case '${1}':
		${2}
		break;${0}
snippet default
	default:
		${1}
		break;${0}
snippet try
	try {
		${0}
	}
	catch(${1:Exception} $e) {
	}
# Loops --------------------------------------------------------
snippet for
	for ($${2:i} = 0; $$2 < ${1:count}; $$2++) {
		${0}
	}
snippet foreach
	foreach ($${1} as $${2}) {
		${0}
	}
snippet keyvalue
	foreach ($${1} as $${2:key} as $${3:value}) {
		${0}
	}
snippet do
	do {
		${0}
	}
	while(${1});
snippet while
	while (${1:true}) {
		${0}
	}
# Functions/Methods --------------------------------------------
snippet f
	function ${1}(${2}) {
		${0}
	}
snippet m
	${3:protected} function ${1}(${2}) {
		${0}
	}
snippet public
	public function ${1}(${2}) {
		${0}
	}
snippet protected
	protected function ${1}(${2}) {
		${0}
	}
snippet private
	private function ${1}(${2}) {
		${0}
	}
snippet getter
	/**
	 * Gets the value of ${1}.
	 *
	 * @return ${2:string}
	 */
	${6:public} function get${3:$1}() {
		return $this->${5:$1};
	}${0}
snippet setter
	/**
	 * Sets the value of ${1}.
	 *
	 * @param ${2:string} $${3:value} ${4}
	 *
	 * @return ${5:`snippets#Filename()`}
	 */
	${8:public} function set${6:$1}($${7:$3}) {
		$this->${7:$1} = $$3;
		return $this;
	}${0}
