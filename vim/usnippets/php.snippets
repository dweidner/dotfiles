# --------------------------------------------------------------
# PHP Snippets (most of them extracted from honza/vim-snippets)
# @see <https://github.com/honza/vim-snippets>
# --------------------------------------------------------------

# -------------------------------------
# Table of Contents:
# -------------------------------------
# 1. Mixed Markup
# 2. Control Structures
# 3. Loops
# 4. Variables/Constants
# 5. Class Declaration/Instantiation
# 6. Functions/Methods
# 7. PHPDoc
# 8. Debugging
# 9. Misc
# -------------------------------------


# Mixed Markup ------------------------------------------------- {{{1

snippet <? "Opening tag" b
<?php

$0
endsnippet

snippet ?  "<? ... ?>" i
<?php $0 ?>
endsnippet

snippet ?e "<? echo ...; ?>" i
<?php echo $0; ?>
endsnippet

snippet ?if "<? if (...): ?>" b
<?php if (${1}): ?>
	${VISUAL}$0
<?php endif; ?>
endsnippet

snippet ?ifelse "<? if (...): ?>" b
<?php if (${1}): ?>
	${2}
<?php else: ?>
	$0
<?php endif; ?>
endsnippet

snippet ?else "<? else: ?>" b
<?php else: ?>
endsnippet

snippet ?elseif "<? elseif (...): ?>" b
<?php elseif (${1}): ?>
endsnippet

snippet ?for "<? for (...): ?>" b
<?php for ($${2:i} = 0; $$2 < ${1:$count}; $$2++): ?>
	${VISUAL}$0
<?php endfor; ?>
endsnippet

snippet ?foreach "<? foreach (...): ?>" b
<?php foreach ($${1} as $${2}): ?>
	${VISUAL}$0
<?php endforeach; ?>
endsnippet

snippet ?keyvalue "<? foreach (...): ?>" b
<?php foreach ($${1} as $${2:key} => $${3:value}): ?>
	${VISUAL}$0
<?php endforeach; ?>
endsnippet

snippet ?while "<? while (...) ?>" b
<?php while (${1:true}) ?>
	${VISUAL}$0
<?php endwhile; ?>
endsnippet


# Control Structures ------------------------------------------- {{{1

snippet if "if (...)" b
if (${1}) {
	${2}
}
$0
endsnippet

snippet ifelse "if {...} else {...}" b
if (${1}) {
	${2}
}
else {
	${3}
}
$0
endsnippet

snippet else "else" b
else {
	${1}
}
endsnippet

snippet elseif "elseif (...)" b
elseif (${1}) {
	$0
}
endsnippet

snippet switch "switch (...)" b
switch($${1}) {
	case '${2}':
		${3}
		break;
	$4
}
$0
endsnippet

snippet case "case '...'" b
case '${1}':
	${2}
	break;$0
endsnippet

snippet default "default" b
default:
	${1}
	break;$0
endsnippet

snippet try "try {...} catch {...}" b
try {
	${VISUAL}$3
}
catch(${1:Exception} $e) {
	${2:// Ignore exception type}
}
$0
endsnippet


# Loops -------------------------------------------------------- {{{1

snippet for "for (...)" b
for ($${2:i} = 0; $$2 < ${1:count}; $$2++) {
	${VISUAL}$3
}
$0
endsnippet

snippet foreach "foreach (...)" b
foreach ($${1} as $${2}) {
	${VISUAL}$3
}
$0
endsnippet

snippet keyvalue "foreach (...)" b
foreach ($${1} as $${2:key} => $${3:value}) {
	${VISUAL}$4
}
$0
endsnippet

snippet do "do {...} while (...)" b
do {
	${VISUAL}$2
}
while(${1});
$0
endsnippet

snippet while "while (...)" b
while (${1:true}) {
	${VISUAL}$2
}
$0
endsnippet


# Variables/Constants ------------------------------------------ {{{1

snippet $ "Variable assignment..."
$${1:foo} = ${2};$0
endsnippet

snippet $? "Ternary assignment..."
$${1:foo} = (${2}) ? ${3} : ${3};$0
endsnippet

snippet $s "Server information..."
$_SERVER['${1}']$0
endsnippet

snippet $e "Environment variables..."
$_ENV['${1}']$0
endsnippet

snippet $c "HTTP cookies..."
$_COOKIE['${1}']$0
endsnippet

snippet $f "HTTP file uploads..."
$_FILES['${1}']$0
endsnippet

snippet $g "HTTP GET variables..."
$_GET['${1}']$0
endsnippet

snippet $p "HTTP POST variables..."
$_POST['${1}']$0
endsnippet

snippet $r "HTTP REQUEST variables..."
$_REQUEST['${1}']$0
endsnippet

snippet def "Constant definition..." b
define('${1:FOO}', ${2:true});$0
endsnippet


# Class Declaration/Instantiation  ----------------------------- {{{1

snippet new "New class instance..."
	$${1:foo} = new ${2:${1/\w+\s*/\u$0/}}($3);$0
endsnippet

snippet ns "Namespace declaration..." b
namespace ${1};$0
endsnippet

snippet use "Use declaration..." b
use ${1};$0
endsnippet

snippet class "Class declaration" b
/**
 * Class ${1:`!p snip.rv=snip.basename.title()`}
 */
class $1 {
	$0
}
endsnippet

snippet interface "Interface declaration" b
/**
 * Interface ${1:`!p snip.rv=snip.basename.title()`}
 */
interface $1 {
	$0
}
endsnippet

snippet construct "Constructor..." b
/**
 * Creates a new instance of ${1}.
 *
 * @param $3mixed ${2/, /\n   * \@param mixed /g}
 */
public function __construct(${2:$dependency}) {${2/\$(\w+)(, )*/\n      $this->$1 = $$1;/g}
}
$0
endsnippet


# Functions/Methods -------------------------------------------- {{{1

snippet f "Function..." b
function ${1}(${2}) {
	${VISUAL}$3
}
$0
endsnippet

snippet lambda "Annonymous function..." b
function(${1}) ${2:use ($var) }{
	${VISUAL}${3}
}${0}
endsnippet

snippet m "Method..." b
/**
 * ${5:TODO: Undocumented function}
 *
 * @return ${6:void}
 */
${3:public} function ${1}(${2}) {
	${VISUAL}$4
}
$0
endsnippet

snippet public "Public Method..." b
/**
 * ${4:TODO: Undocumented function}
 *
 * @return ${5:void}
 */
public function ${1}(${2}) {
	${VISUAL}$3
}
$0
endsnippet

snippet protected "Protected Method..." b
/**
 * ${4:TODO: Undocumented function}
 *
 * @return ${5:void}
 */
protected function ${1}(${2}) {
	${VISUAL}$3
}
$0
endsnippet

snippet private "Private Method..." b
/**
 * ${4:TODO: Undocumented function}
 *
 * @return ${5:void}
 */
private function ${1}(${2}) {
	${VISUAL}$3
}
$0
endsnippet

snippet getter "Getter..." b
/**
 * Returns the value of ${1}.
 *
 * @return ${2:mixed}
 */
${4:public} function get${3:${1/\w+\s*/\u$0/}}() {
	return $this->$1;
}
$0
endsnippet

snippet setter "Setter..." b
/**
 * Sets the value of ${1}.
 *
 * @param ${2:mixed} $${3:value} ${4:Value to set}
 * @return ${5:`!p snip.rv=snip.basename.title()`}
 */
${7:public} function set${6:1/\w+\s*/\u$0/}($2 $$3}) {
	$this->$1 = $$3;
	return $this;
}
$0
endsnippet

snippet getset "Getter/Setter..." b
/**
 * Returns the value of ${1}.
 *
 * @return ${2:mixed}
 */
${4:public} function get${3:${1/\w+\s*/\u$0/}}() {
	return $this->$1;
}

/**
 * Sets the value of $1.
 *
 * @param $2 $${5:value} ${6:Value to set}
 * @return ${7:`!p snip.rv=snip.basename.title()`}
 */
$4 function set$3($2 $$5}) {
	$this->$1 = $$5;
	return $this;
}
$0
endsnippet


# PHPDoc ------------------------------------------------------- {{{1

snippet /* "DocBlock..." b
/**
 * $1
 */
endsnippet

snippet @f "DocBlock: file"
@file
$0
endsnippet

snippet @p "DocBlock: parameter"
@param ${1:mixed} $${2} ${3:Parameter description}
endsnippet

snippet @v "DocBlock: class variable"
@var ${1:mixed} ${2}
endsnippet

snippet @c "DocBlock: constant"
@const ${1:FOO} ${2}
endsnippet

snippet @r "DocBlock: return value"
@return ${1:void}
endsnippet

snippet @i "DocBlock: inheritdoc"
{@inheritdoc}
endsnippet

snippet @a "DocBlock: author"
@author ${1:`git config --global user.name` <`git config --global user.email`>}
endsnippet

snippet @s "DocBlock: since"
@since ${1:1.0} ${2:- `!v strftime('%d %b, %Y')`}
endsnippet

snippet @pkg "DocBlock: package"
@package ${1}
endsnippet

snippet @spkg "DocBlock: subpackage"
@subpackage ${1}
endsnippet

snippet @tpl+ "DocBlock: start template"
/**#@+
 * ${1}
 */$0
endsnippet

snippet @tpl- "DocBlock: end template"
/**#@-*/
endsnippet


# Debugging ---------------------------------------------------- {{{1

snippet dump "Dump variable information..."
var_dump(${1});$0
endsnippet

snippet export "Dump variable information..."
var_export(${1};$0
endsnippet

snippet pre "Output preformatted text..."
echo '<pre>'; ${1}; echo '</pre>';$0
endsnippet

snippet die "Terminate script..."
die();$0
endsnippet

snippet log "Log error message..."
error_log(var_export(${1}, true));$0
endsnippet


# Misc --------------------------------------------------------- {{{1

snippet r "Require..."
require '${1}';$0
endsnippet

snippet ro "Require once..."
require_once '${1}';$0
endsnippet

snippet i "Include..."
include '${1}';$0
endsnippet

snippet io "Include once..."
include_once '${1}';$0
endsnippet


# vim:foldmethod=marker:foldlevel=2
